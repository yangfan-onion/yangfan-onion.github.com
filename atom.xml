<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The Man Who Can&#39;t Be Moved!</title>
  <subtitle>谁把你的长发盘起,谁为你做了xxxL的嫁衣...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yangfan-onion.github.io/"/>
  <updated>2018-12-07T07:18:38.658Z</updated>
  <id>http://yangfan-onion.github.io/</id>
  
  <author>
    <name>yangfan.onion</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A Street Cat Named Mozzie MiuMiu</title>
    <link href="http://yangfan-onion.github.io/A-Street-Cat-Named-Mozzie-MiuMiu/"/>
    <id>http://yangfan-onion.github.io/A-Street-Cat-Named-Mozzie-MiuMiu/</id>
    <published>2018-12-04T05:58:07.000Z</published>
    <updated>2018-12-07T07:18:38.658Z</updated>
    
    <content type="html">&lt;h3 id=&quot;当遇到一个没有安全感的ta，或许能做的就是陪伴，陪伴到ta不再挠你为止吧！&quot;&gt;当遇到一个没有安全感的ta，或许能做的就是陪伴，陪伴到ta不再挠你为止吧！&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;当遇到一个没有安全感的ta，或许能做的就是陪伴，陪伴到ta不再挠你为止吧！&quot;&gt;当遇到一个没有安全感的ta，或许能做的就是陪伴，陪伴到ta不再挠你为止吧！&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NGINX Tuning For Best Performance</title>
    <link href="http://yangfan-onion.github.io/NGINX-Tuning-For-Best-Performance/"/>
    <id>http://yangfan-onion.github.io/NGINX-Tuning-For-Best-Performance/</id>
    <published>2018-04-23T04:47:01.000Z</published>
    <updated>2018-04-25T10:19:53.898Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://gist.github.com/denji/8359866&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/denji/8359866&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://gist.github.com/denji/8359866&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/denji/8359866&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redis In Action</title>
    <link href="http://yangfan-onion.github.io/Redis-In-Action/"/>
    <id>http://yangfan-onion.github.io/Redis-In-Action/</id>
    <published>2018-03-17T08:06:19.000Z</published>
    <updated>2018-03-17T14:38:39.122Z</updated>
    
    <content type="html">&lt;h3 id=&quot;持久化两种方式&quot;&gt;持久化两种方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;snapshotting&lt;/li&gt;
&lt;li&gt;append-only file 「AOF」&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;snapshooting&quot;&gt;snapshooting&lt;/h5&gt;&lt;p&gt;BGSAVE后台备份，会启动一个子进程来备份，当Redis内存很大时，比较消耗时间，建议手动使用SAVE命令保存&lt;/p&gt;
&lt;h5 id=&quot;AOF&quot;&gt;AOF&lt;/h5&gt;&lt;p&gt;appendonly yes&lt;/p&gt;
&lt;p&gt;[appendfsync always]每次写入都刷新到硬盘上&lt;br&gt;[appendfsync everysec]每秒钟同步一次到硬盘&lt;br&gt;[appendfsync no]不做显式操作，由操作系统决定&lt;/p&gt;
&lt;p&gt;BGREWRITEAOF 重写/压缩AOF文件&lt;/p&gt;
&lt;p&gt;auto-aof-rewrite-perentage 100 当AOF文件比上次重写之后提及大了一倍（100%）以上时自动重写&lt;br&gt;auto-aof-rewrite-min-size 64mb 当AOF文件体积大于64mb时自动重写&lt;/p&gt;
&lt;p&gt;————————&lt;/p&gt;
&lt;h3 id=&quot;复制&quot;&gt;复制&lt;/h3&gt;&lt;p&gt;支持主从复制，不支持主主相互复制&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SLAVEOF host port&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过执行 SLAVEOF host port 命令，可以将当前服务器转变为指定服务器的从属服务器(slave server)。&lt;/p&gt;
&lt;p&gt;如果当前服务器已经是某个主服务器(master server)的从属服务器，那么执行 SLAVEOF host port 将使当前服务器停止对旧主服务器的同步，丢弃旧数据集，转而开始对新主服务器进行同步。&lt;/p&gt;
&lt;p&gt;另外，对一个从属服务器执行命令 SLAVEOF NO ONE 将使得这个从属服务器关闭复制功能，并从从属服务器转变回主服务器，原来同步所得的数据集不会被丢弃。&lt;/p&gt;
&lt;p&gt;利用『 SLAVEOF NO ONE 不会丢弃同步所得数据集』这个特性，可以在主服务器失败的时候，将从属服务器用作新的主服务器，从而实现无间断运行。&lt;/p&gt;
&lt;h3 id=&quot;INFO命令提供了大量与Redis服务器当前状态有关的信息&quot;&gt;&lt;strong&gt;INFO&lt;/strong&gt;命令提供了大量与Redis服务器当前状态有关的信息&lt;/h3&gt;&lt;p&gt;Ex:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存占用量&lt;/li&gt;
&lt;li&gt;客户端连接数&lt;/li&gt;
&lt;li&gt;每个数据库包含的键的数量&lt;/li&gt;
&lt;li&gt;上一次创建快照文件之后执行的命令数量等等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;redis-benchmark_可以展示Redis在当前服务器上面的性能&quot;&gt;redis-benchmark 可以展示Redis在当前服务器上面的性能&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;持久化两种方式&quot;&gt;持久化两种方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;snapshotting&lt;/li&gt;
&lt;li&gt;append-only file 「AOF」&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;snapshooting&quot;&gt;snapshooting&lt;/h5&gt;&lt;p&gt;BGSA
    
    </summary>
    
      <category term="Code" scheme="http://yangfan-onion.github.io/categories/Code/"/>
    
    
      <category term="Redis" scheme="http://yangfan-onion.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>编写可读代码的艺术</title>
    <link href="http://yangfan-onion.github.io/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    <id>http://yangfan-onion.github.io/编写可读代码的艺术/</id>
    <published>2018-01-11T07:56:09.000Z</published>
    <updated>2018-01-11T08:52:18.258Z</updated>
    
    <content type="html">&lt;h2 id=&quot;一、表面层次的改进&quot;&gt;一、表面层次的改进&lt;/h2&gt;&lt;h4 id=&quot;1-_把信息装到名字里&quot;&gt;1. 把信息装到名字里&lt;/h4&gt;&lt;h5 id=&quot;（1）选择专业的词&quot;&gt;（1）选择专业的词&lt;/h5&gt;&lt;p&gt;清晰和精确比装可爱好。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;单词&lt;/th&gt;
&lt;th&gt;更多选择&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Get&lt;/td&gt;
&lt;td&gt;Fetch, Download&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stop&lt;/td&gt;
&lt;td&gt;Kill, Pause&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Send&lt;/td&gt;
&lt;td&gt;Deliver, Dispatch, Announce, Distribute, Route&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Find&lt;/td&gt;
&lt;td&gt;Search, Extract, Locate, Recover&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Start&lt;/td&gt;
&lt;td&gt;Launch, Create, Begin, Open&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Make&lt;/td&gt;
&lt;td&gt;Create, SetUp, Build, Generate, Compose, Add, New&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&quot;（2）避免使用像tmp和retval这样泛泛的名字&quot;&gt;（2）避免使用像tmp和retval这样泛泛的名字&lt;/h5&gt;&lt;p&gt;retval这个名字没有包含很多信息，用一个描述该变量的值的名字来代替它。&lt;br&gt;tmp这个名字只应用于短期存在且临时性为其主要存在因素的变量。&lt;br&gt;如果你要使用像tmp、it或者retval这样空泛的名字，那么你要有个好的理由。&lt;/p&gt;
&lt;p&gt;我们的返回值经常有 $result, $data这样的值&lt;/p&gt;
&lt;h5 id=&quot;（3）用具体的名字代替抽象的名字&quot;&gt;（3）用具体的名字代替抽象的名字&lt;/h5&gt;&lt;p&gt;在给变量、函数或者其他元素命名时，要把它描述得更具体而不是更抽象。&lt;/p&gt;
&lt;h5 id=&quot;（4）为名字附带更多信息&quot;&gt;（4）为名字附带更多信息&lt;/h5&gt;&lt;p&gt;如果你的变量是一个度量的话（如时间长度或者字节数），那么最好把名字带上它的单位。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数参数&lt;/th&gt;
&lt;th&gt;带单位的参数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Start(int delay)&lt;/td&gt;
&lt;td&gt;delay -&amp;gt; delay_secs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CreateCache(int size)&lt;/td&gt;
&lt;td&gt;size -&amp;gt; size_mb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ThrottleDownload(float limit)&lt;/td&gt;
&lt;td&gt;limit -&amp;gt; max_kbps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rotate(float angle)&lt;/td&gt;
&lt;td&gt;angle -&amp;gt; degrees_cw&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在对于这个变量存在危险或者意外的任何时候你也该采用它。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;情形&lt;/th&gt;
&lt;th&gt;变量名&lt;/th&gt;
&lt;th&gt;更好的名字&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;一个“纯文本”格式的密码，需要加密后才能进一步使用&lt;/td&gt;
&lt;td&gt;password&lt;/td&gt;
&lt;td&gt;plaintext_password&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;一条用户提供的注释，需要转义之后才能用于显示&lt;/td&gt;
&lt;td&gt;comment&lt;/td&gt;
&lt;td&gt;unescaped_comment&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;已转化为UTF-8格式的html字节&lt;/td&gt;
&lt;td&gt;html&lt;/td&gt;
&lt;td&gt;html_utf8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;以“url方式编码”的输入数据&lt;/td&gt;
&lt;td&gt;data&lt;/td&gt;
&lt;td&gt;data_urlenc&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&quot;（5）名字应该有多长&quot;&gt;（5）名字应该有多长&lt;/h5&gt;&lt;p&gt;在小的作用域里可以使用短的名字，如果一个标识符有较大的作用域，那么它的名字就要包含足够的信息以便含义更清楚。对于首字母缩略词和缩写，使用项目所特有的缩写词非常糟糕。&lt;br&gt;经验原则是：团队的新成员是否能理解这个名字的含义。&lt;br&gt;丢掉没用的词：有时名字中的某些单词可以拿掉而不会损失任何信息。&lt;/p&gt;
&lt;p&gt;我们的变量命名最典型的是 _ __ ,硬盘没有那么值钱，所以把变量名写全。&lt;/p&gt;
&lt;h5 id=&quot;（6）利用名字的格式来传递含义&quot;&gt;（6）利用名字的格式来传递含义&lt;/h5&gt;&lt;p&gt;项目中使用一致的命名规范，使得对于下划线、连字符和大小写的使用方式也可以把更多的信息装到名字中。&lt;/p&gt;
&lt;h4 id=&quot;2-_不会误解的名字&quot;&gt;2. 不会误解的名字&lt;/h4&gt;&lt;p&gt;要多问自己几遍：“这个名字会被别人解读成其他的意义吗？”&lt;br&gt;与使用者的期望相匹配&lt;br&gt;用min和max来表示（包含）极限&lt;br&gt;用first和last来表示包含的范围&lt;br&gt;用begin和end来表示包含/排除范围&lt;br&gt;使用is和has这样的词来明确表示它是布尔值，避免使用反义的词&lt;/p&gt;
&lt;p&gt;我们的变量名：$booRollback; 根据这个值，不能清楚判断是否需要回滚&lt;br&gt;我们的方法名：hide_menu_show() 又是hide,又是show, 完全不知道啥意思； getGoodsALl()以为这个方法是获取商品信息，拿到返回值，结果这是一个set&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;1.png&quot; alt=&quot;1.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-_审美&quot;&gt;3. 审美&lt;/h4&gt;&lt;h5 id=&quot;（1）三条原则&quot;&gt;（1）三条原则&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;使用一致的布局，让读者很快就习惯这种风格&lt;/li&gt;
&lt;li&gt;让相似的代码看上去相似&lt;/li&gt;
&lt;li&gt;把相关的代码行分组，形成代码块&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;（2）方法&quot;&gt;（2）方法&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;在需要时使用列对齐&lt;/li&gt;
&lt;li&gt;把代码分成“段落”&lt;/li&gt;
&lt;li&gt;一致的风格比“正确”的风格更重要&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;二、简化循环和逻辑&quot;&gt;二、简化循环和逻辑&lt;/h2&gt;&lt;h4 id=&quot;(1)-_把控制流变得易读&quot;&gt;(1). 把控制流变得易读&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;默认情况下都用if/else，三目运算符?:只有在最简单的情况下使用。&lt;/li&gt;
&lt;li&gt;从函数中提前返回&lt;/li&gt;
&lt;li&gt;最小化嵌套&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$foo&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;){
    xxxx
    xxxx
    xxxx
    xxxx
}&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;{
    return &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;
}
yyyyyyy
yyyyyyy



&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$foo&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;){
    return &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;
}

xxxx
xxxx
xxxx

yyyyyyy
yyyyyyy
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;2-_拆分超长的表达式&quot;&gt;2. 拆分超长的表达式&lt;/h4&gt;&lt;h5 id=&quot;（1）用作解释的变量&quot;&gt;（1）用作解释的变量&lt;/h5&gt;&lt;p&gt;拆分表达式最简单的方法就是引入一个额外的变量，让它来表示一个小一点的子表达式：&lt;/p&gt;
&lt;h4 id=&quot;3-_变量与可读性&quot;&gt;3. 变量与可读性&lt;/h4&gt;&lt;h5 id=&quot;（1）缩小变量的作用域&quot;&gt;（1）缩小变量的作用域&lt;/h5&gt;&lt;p&gt;让你的代码对尽量少的代码行可见&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把大的类拆分成小一些的类，并且这些类之间相互独立&lt;/li&gt;
&lt;li&gt;大文件拆分成小文件，大函数拆分成小函数&lt;/li&gt;
&lt;li&gt;“尽量使方法变成静态的”，静态方法是让读者知道“这几行代码与那些变量无关”的好办法&lt;/li&gt;
&lt;li&gt;把定义向下移，把每个定义移到它的使用之前&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们的方法2K多行，一个变量可能是在最开始申明的&lt;/p&gt;
&lt;h5 id=&quot;（2）只写一次的变量更好&quot;&gt;（2）只写一次的变量更好&lt;/h5&gt;&lt;p&gt;操作一个变量的地方越多，越难确定它的当前值&lt;/p&gt;
&lt;p&gt;2K多行的方法，我们的$arrMap变量还从头用到尾,不断赋值，不断unset&lt;/p&gt;
&lt;h2 id=&quot;三、重新组织代码&quot;&gt;三、重新组织代码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;抽取不相关的子问题&lt;/li&gt;
&lt;li&gt;一次只做一件事&lt;/li&gt;
&lt;li&gt;把想法变成代码&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、表面层次的改进&quot;&gt;一、表面层次的改进&lt;/h2&gt;&lt;h4 id=&quot;1-_把信息装到名字里&quot;&gt;1. 把信息装到名字里&lt;/h4&gt;&lt;h5 id=&quot;（1）选择专业的词&quot;&gt;（1）选择专业的词&lt;/h5&gt;&lt;p&gt;清晰和精确比装可爱好。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;t
    
    </summary>
    
      <category term="Code" scheme="http://yangfan-onion.github.io/categories/Code/"/>
    
    
      <category term="clean code" scheme="http://yangfan-onion.github.io/tags/clean-code/"/>
    
      <category term="variable name principle" scheme="http://yangfan-onion.github.io/tags/variable-name-principle/"/>
    
  </entry>
  
  <entry>
    <title>程序员的理财（养老）计划</title>
    <link href="http://yangfan-onion.github.io/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E7%90%86-%E5%85%BB-%E8%B4%A2-%E8%80%81-%E8%AE%A1%E5%88%92/"/>
    <id>http://yangfan-onion.github.io/程序员的理-养-财-老-计划/</id>
    <published>2017-10-11T14:06:57.000Z</published>
    <updated>2017-10-26T03:13:18.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;个人理财的背景&quot;&gt;个人理财的背景&lt;/h3&gt;&lt;p&gt;2013年底，在爸妈资助下，在成都软件园旁贷款买房，当时刚毕业，贷款50万，也没想过以后的还贷压力，就觉得现在还还完贷，还能剩下一些钱，随着工资上涨，生活应该会越来越好。&lt;/p&gt;
&lt;p&gt;现在2017年8月，陪同事去看房，发现软件园周围翻了一倍以上，还在持续上涨。想起当时刚毕业的自己，想要靠自己，慢慢挣钱全款买房，现在想想也挺有意思的。&lt;/p&gt;
&lt;p&gt;其实仔细算算，贷款50万，25年付清；商贷当时6.1%的利息，这就意味着40万的利息，25年内每个月的还贷钱里面差不多一半是在付银行的利息，心里还是觉得掉坑里面了。&lt;/p&gt;
&lt;p&gt;所以才想到要去理财。&lt;/p&gt;
&lt;h3 id=&quot;参考书籍《富爸爸穷爸爸》《经济学原理》&quot;&gt;参考书籍《富爸爸穷爸爸》《经济学原理》&lt;/h3&gt;&lt;p&gt;首先看了一些个人理财的书，里面讲了一些简单的概念，使人茅塞顿开。&lt;/p&gt;
&lt;p&gt;理解了最基本的资产与负债的概念&lt;/p&gt;
&lt;p&gt;大学教会了我们赚钱的技能，却没有教会我们更重要的，如何去管理自己的钱。&lt;/p&gt;
&lt;p&gt;想想平时在公司上班，努力上班，朝9晚9，拿到的辛苦钱，在薪水到手前，政府已经提前分去一部分税，越努力的加班，给政府交的税越多，心里更不是滋味了。&lt;/p&gt;
&lt;p&gt;在大多数人的消费理念里面，现在透支未来的收入，各种贷款买房，买车。&lt;br&gt;国家老龄化加剧，人口红利消失，鼓励二胎，让你去换更大的房子，更多的贷款。&lt;br&gt;同时我们也掉入了经济学家设好的游戏规则里面，我们只能拼命挣钱，推动着这个车轮前进。&lt;/p&gt;
&lt;p&gt;当然现阶段更多的是无奈，随即想到的就是反抗，如何才能跳出这个怪圈，学习-&amp;gt;实践，希望能早日实现财务自由吧！&lt;/p&gt;
&lt;h3 id=&quot;买房穷三年&quot;&gt;买房穷三年&lt;/h3&gt;&lt;p&gt;买房穷三年，还贷，攒装修钱，家具家电；穷完三年来到2017年，今年有闲钱了，考虑将钱利用起来&lt;/p&gt;
&lt;h3 id=&quot;72法则：翻倍时间&quot;&gt;72法则：翻倍时间&lt;/h3&gt;&lt;p&gt;72/年化率 = 翻倍时间&lt;/p&gt;
&lt;h3 id=&quot;115法则_翻三倍时间&quot;&gt;115法则 翻三倍时间&lt;/h3&gt;&lt;p&gt;115/年化率 = 翻三倍时间&lt;/p&gt;
&lt;h3 id=&quot;投资方式&quot;&gt;投资方式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;投资自己&lt;/li&gt;
&lt;li&gt;余额宝&lt;/li&gt;
&lt;li&gt;股票&lt;/li&gt;
&lt;li&gt;基金&lt;/li&gt;
&lt;li&gt;P2P&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;投资自己&lt;/em&gt;：现在在一家中小型创业公司，写PHP，工资&amp;amp;福利都不高，在成都很容易摸到天花板，有考虑过继续重操旧业Java，有考虑过在职研究生或者英语上面纵向提升，在30岁之前，给自己一块好的敲门砖，争取去到一个稳定的，待遇&amp;amp;福利都不错的公司。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;余额宝已经跌破4%,限额10w，跑不赢通货膨胀（5%+）。果断放弃。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;股票在没系统学习之前，不考虑上车&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基金学习中，基金分很多种，股票，货币，债券，指数基金等等。巴菲特也在公开场合建议普通人投资指数基金，在长期来看是上升趋势。会进一步了解。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;P2P互联网金融，平台良莠不齐，大平台利率较低：6%～10%（一万块钱，一年600～1000）， 小平台利率稍高：10%～15%（一万块钱一年1000～1500）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&quot;上班好好工作，下班好好理财&quot;&gt;上班好好工作，下班好好理财&lt;/h3&gt;&lt;p&gt;最开始投资的网贷，找大平台，年化率高的新手标，薅大平台的羊毛，慢慢也学会去看平台，是信贷or资产抵押贷款，汽车质押or汽车抵押，银行存管or第三方担保等等。&lt;/p&gt;
&lt;p&gt;网贷利率也会越来越低，但是给自己一个目标吧！不断寻找年化10%的投资洼地进行投资！&lt;/p&gt;
&lt;p&gt;推荐一个&lt;a href=&quot;https://m.renrendai.com/mo/pb/cv1/page/pageId/59c0928485c66d1e7bad032b?share_id=UlJEX0NBVENIX05FV19SRUdJU1RFUjcwMTkyNTg&amp;amp;encryptMobile=135****4904&amp;amp;utm_source=wechat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;人人贷&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;推荐一个&lt;a href=&quot;https://hd.tuandai.com/weixin/20170105Invite/InviteMainM.aspx?shareVersion=versionA&amp;amp;shareToolType=4?extendkey=444B2DFA15CEA50604702CA76726061C&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;团贷网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;推荐一个知乎公众号：&lt;a href=&quot;https://zhuanlan.zhihu.com/ChilliGirl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;海椒妞的网贷日记&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;30年理财（养老）计划&quot;&gt;30年理财（养老）计划&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;schedule.png&quot; alt=&quot;理财计划&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;危机感&quot;&gt;危机感&lt;/h3&gt;&lt;p&gt;IT行业，大公司也会对一部分40岁以上的员工进行裁减，如果没有保证核心竞争力，这个行业绝不是铁饭碗，也会面临就业风险。&lt;/p&gt;
&lt;p&gt;所以也请每个IT行业的从业者想一想自己的核心竞争力是什么，只有拥有这个才能让自己立于不败之地。&lt;/p&gt;
&lt;p&gt;所以也是为什么要提高自己的被动收入，在什么年龄阶段拥有多少比例的被动收入。&lt;/p&gt;
&lt;p&gt;希望一起努力，早日实现自己的财务自由！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;个人理财的背景&quot;&gt;个人理财的背景&lt;/h3&gt;&lt;p&gt;2013年底，在爸妈资助下，在成都软件园旁贷款买房，当时刚毕业，贷款50万，也没想过以后的还贷压力，就觉得现在还还完贷，还能剩下一些钱，随着工资上涨，生活应该会越来越好。&lt;/p&gt;
&lt;p&gt;现在2017年8月，陪同事去看
    
    </summary>
    
      <category term="理财" scheme="http://yangfan-onion.github.io/categories/%E7%90%86%E8%B4%A2/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL服务器性能剖析</title>
    <link href="http://yangfan-onion.github.io/MySQL%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90/"/>
    <id>http://yangfan-onion.github.io/MySQL服务器性能剖析/</id>
    <published>2017-07-09T16:36:57.000Z</published>
    <updated>2017-07-12T01:21:00.000Z</updated>
    
    <content type="html">&lt;p&gt;Handler_read_rnd_next: 表示“在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Handler_read_rnd_next: 表示“在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。&lt;/p&gt;

    
    </summary>
    
      <category term="Code" scheme="http://yangfan-onion.github.io/categories/Code/"/>
    
    
      <category term="MySQL" scheme="http://yangfan-onion.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Laravel「4.0-Artisan Console」</title>
    <link href="http://yangfan-onion.github.io/Laravel%E3%80%8C4-0-Artisan-Console%E3%80%8D/"/>
    <id>http://yangfan-onion.github.io/Laravel「4-0-Artisan-Console」/</id>
    <published>2017-06-16T11:34:56.000Z</published>
    <updated>2017-06-16T11:36:16.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Artisan_Console&quot;&gt;Artisan Console&lt;/h1&gt;&lt;p&gt;第二章介绍过Migrations, 当时我们只是介绍了，它可以帮助我们生成数据库表结构，但是当时只是在一个库里面生成的，结合到DHB3.0。&lt;/p&gt;
&lt;p&gt;我们有&lt;strong&gt;业务很多库&lt;/strong&gt;，所以需要在多个业务库生成表结构。&lt;/p&gt;
&lt;h3 id=&quot;创建一个指令&quot;&gt;创建一个指令&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;php artisan make:command DHBMigrate

//注册指令
//app/Console/Kernel.php的&lt;span class=&quot;variable&quot;&gt;$commands&lt;/span&gt;里面添加DHBMigrate指令

protected &lt;span class=&quot;variable&quot;&gt;$commands&lt;/span&gt; = [
    Commands\DHBMigrate::class
];
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;指令的执行方法&quot;&gt;指令的执行方法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;//调用已存在的指令migrate

public &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; handle()
{
    &lt;span class=&quot;variable&quot;&gt;$common&lt;/span&gt;_database_list = [&lt;span class=&quot;string&quot;&gt;&#39;common&#39;&lt;/span&gt;];
    &lt;span class=&quot;variable&quot;&gt;$business&lt;/span&gt;_database_list = [&lt;span class=&quot;string&quot;&gt;&#39;data_1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;data_2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;data_3&#39;&lt;/span&gt;];

    foreach (&lt;span class=&quot;variable&quot;&gt;$common&lt;/span&gt;_database_list as &lt;span class=&quot;variable&quot;&gt;$database&lt;/span&gt;) {
        &lt;span class=&quot;variable&quot;&gt;$this-&lt;/span&gt;&amp;gt;call(&lt;span class=&quot;string&quot;&gt;&#39;migrate&#39;&lt;/span&gt;, [
            &lt;span class=&quot;string&quot;&gt;&#39;--database&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;variable&quot;&gt;$database&lt;/span&gt;,
            &lt;span class=&quot;string&quot;&gt;&#39;--path&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;database/migrations/common&#39;&lt;/span&gt;
        ]);
    }

    foreach (&lt;span class=&quot;variable&quot;&gt;$business&lt;/span&gt;_database_list as &lt;span class=&quot;variable&quot;&gt;$database&lt;/span&gt;) {
        &lt;span class=&quot;variable&quot;&gt;$this-&lt;/span&gt;&amp;gt;call(&lt;span class=&quot;string&quot;&gt;&#39;migrate&#39;&lt;/span&gt;, [
            &lt;span class=&quot;string&quot;&gt;&#39;--database&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;variable&quot;&gt;$database&lt;/span&gt;,
            &lt;span class=&quot;string&quot;&gt;&#39;--path&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;database/migrations/data&#39;&lt;/span&gt;
        ]);
    }

    &lt;span class=&quot;variable&quot;&gt;$this-&lt;/span&gt;&amp;gt;info(&lt;span class=&quot;string&quot;&gt;&#39;DHB SQL Migrate works well!&#39;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样我们的表结构就生成好了，指令&amp;amp;&amp;amp;跨库&amp;amp;&amp;amp;自动化&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;DHBMigrate.png&quot; alt=&quot;DHBMigrate&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Artisan_Console&quot;&gt;Artisan Console&lt;/h1&gt;&lt;p&gt;第二章介绍过Migrations, 当时我们只是介绍了，它可以帮助我们生成数据库表结构，但是当时只是在一个库里面生成的，结合到DHB3.0。&lt;/p&gt;
&lt;p&gt;我们有&lt;strong&gt;业务很
    
    </summary>
    
      <category term="Code" scheme="http://yangfan-onion.github.io/categories/Code/"/>
    
    
      <category term="Laravel" scheme="http://yangfan-onion.github.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>Laravel「3.0-MiddleWare」</title>
    <link href="http://yangfan-onion.github.io/Laravel%E3%80%8C3-0-MiddleWare%E3%80%8D/"/>
    <id>http://yangfan-onion.github.io/Laravel「3-0-MiddleWare」/</id>
    <published>2017-06-16T11:28:51.000Z</published>
    <updated>2017-06-16T11:33:30.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;什么是Middleware？&quot;&gt;什么是Middleware？&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;Filter.gif&quot; alt=&quot;filter&quot;&gt;&lt;/p&gt;
&lt;p&gt;Laravel里面很多设置模式的概念，DI[Dependency Injection]， Intercepting Filter &lt;a href=&quot;http://www.oracle.com/technetwork/java/interceptingfilter-142169.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考J2EE的责任链&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;用中间件有什么好处&quot;&gt;用中间件有什么好处&lt;/h3&gt;&lt;p&gt;可以帮我们很清晰的分离代码，简化关键逻辑&lt;/p&gt;
&lt;h3 id=&quot;定义中间件&quot;&gt;定义中间件&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;php artisan make:middleware CheckAge


&amp;lt;?php

&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; App\Http\Middleware;

use Closure;

class CheckAge
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  &lt;span class=&quot;variable&quot;&gt;$request&lt;/span&gt;
     * @param  \Closure  &lt;span class=&quot;variable&quot;&gt;$next&lt;/span&gt;
     * @return mixed
     */
    public function handle(&lt;span class=&quot;variable&quot;&gt;$request&lt;/span&gt;, Closure &lt;span class=&quot;variable&quot;&gt;$next&lt;/span&gt;)
    {
        if (&lt;span class=&quot;variable&quot;&gt;$request-&lt;/span&gt;&amp;gt;age &amp;gt; &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;) {
            return response(null, &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;)-&amp;gt;header(&lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;text/json&#39;&lt;/span&gt;);
        }

        return &lt;span class=&quot;variable&quot;&gt;$next&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$request&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;注册中间件&quot;&gt;注册中间件&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;//app/Http/Kernel.php最后添加 &lt;span class=&quot;variable&quot;&gt;$routeMiddleware&lt;/span&gt;

&lt;span class=&quot;string&quot;&gt;&#39;check.age&#39;&lt;/span&gt; =&amp;gt; \App\Http\Middleware\CheckAge::class,

Route::middleware(&lt;span class=&quot;string&quot;&gt;&#39;check.age&#39;&lt;/span&gt;)-&amp;gt;post(&lt;span class=&quot;string&quot;&gt;&#39;/user&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (Request &lt;span class=&quot;variable&quot;&gt;$request&lt;/span&gt;) {
    return &lt;span class=&quot;string&quot;&gt;&#39;user created successful!&#39;&lt;/span&gt;;
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;post-data.png&quot; alt=&quot;bad request:response 400&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;讲一个内置的中间件_throttle&quot;&gt;讲一个内置的中间件 throttle&lt;/h5&gt;&lt;p&gt;用来限制API请求的次数，回内置RESTful API要求的一些 response header&lt;/p&gt;
&lt;p&gt;修改app/Http/Kernel.php api =&amp;gt; throttle:1,1 每分钟访问1次，超过1次就会报错 「429 Too Many Requests」&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;too-many-request.png&quot; alt=&quot;too many request&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是Middleware？&quot;&gt;什么是Middleware？&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;Filter.gif&quot; alt=&quot;filter&quot;&gt;&lt;/p&gt;
&lt;p&gt;Laravel里面很多设置模式的概念，DI[Dependency Injection]， Interc
    
    </summary>
    
      <category term="Code" scheme="http://yangfan-onion.github.io/categories/Code/"/>
    
    
      <category term="Laravel" scheme="http://yangfan-onion.github.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>Laravel「2.0-Migrations」</title>
    <link href="http://yangfan-onion.github.io/Laravel%E3%80%8C2.0-Migrations%E3%80%8D/"/>
    <id>http://yangfan-onion.github.io/Laravel「2.0-Migrations」/</id>
    <published>2017-06-08T15:59:49.000Z</published>
    <updated>2017-06-08T16:23:38.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;背景&quot;&gt;背景&lt;/h3&gt;&lt;p&gt;现在我们的开发 -&amp;gt; 测试 -&amp;gt; 线上 环境的SQL脚本，都是通过手动拷贝SQL，然后交由DBA手动执行；&lt;/p&gt;
&lt;p&gt;这样会存在一些问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们忘记记录SQL，上线直接报错&lt;/li&gt;
&lt;li&gt;DBA不在，我们不能执行SQL&lt;/li&gt;
&lt;li&gt;执行之后，SQL不能回滚&lt;/li&gt;
&lt;li&gt;新成员加入，不能直接生成表结构和初始化数据&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Laravel解决方案:Migrations&quot;&gt;Laravel解决方案:Migrations&lt;/h3&gt;&lt;p&gt;用PHP生成表结构，统一入口，生成表的变动记录，方便回滚&lt;/p&gt;
&lt;h5 id=&quot;步骤1:&quot;&gt;步骤1:&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;//新增表结构&lt;/span&gt;
php artisan &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;:migration create_users_table --create=users
&lt;span class=&quot;comment&quot;&gt;//修改表结构&lt;/span&gt;
php artisan &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;:migration add_votes_to_users_table --table=users
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&quot;步骤2:&quot;&gt;步骤2:&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;//create_users_table.php&lt;/span&gt;
&lt;span class=&quot;preprocessor&quot;&gt;&amp;lt;?php&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Illuminate&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;Support&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;Facades&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;Schema&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Illuminate&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;Database&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;Schema&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;Blueprint&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Illuminate&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;Database&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;Migrations&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;Migration&lt;/span&gt;;

    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CreateUsersTable&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Migration&lt;/span&gt;
    &lt;/span&gt;{
        &lt;span class=&quot;comment&quot;&gt;/**
         * Run the migrations.
         *
         * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; void
         */&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;
        &lt;/span&gt;{
            Schema::create(&lt;span class=&quot;string&quot;&gt;&#39;users&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(Blueprint &lt;span class=&quot;variable&quot;&gt;$table&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{
                &lt;span class=&quot;variable&quot;&gt;$table&lt;/span&gt;-&amp;gt;increments(&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;);
                &lt;span class=&quot;variable&quot;&gt;$table&lt;/span&gt;-&amp;gt;string(&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;);
                &lt;span class=&quot;variable&quot;&gt;$table&lt;/span&gt;-&amp;gt;string(&lt;span class=&quot;string&quot;&gt;&#39;email&#39;&lt;/span&gt;)-&amp;gt;unique();
                &lt;span class=&quot;variable&quot;&gt;$table&lt;/span&gt;-&amp;gt;string(&lt;span class=&quot;string&quot;&gt;&#39;password&#39;&lt;/span&gt;);
                &lt;span class=&quot;variable&quot;&gt;$table&lt;/span&gt;-&amp;gt;rememberToken();
                &lt;span class=&quot;variable&quot;&gt;$table&lt;/span&gt;-&amp;gt;timestamps();
            });
        }

        &lt;span class=&quot;comment&quot;&gt;/**
         * Reverse the migrations.
         *
         * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; void
         */&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;
        &lt;/span&gt;{
            Schema::dropIfExists(&lt;span class=&quot;string&quot;&gt;&#39;users&#39;&lt;/span&gt;);
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&quot;步骤3:&quot;&gt;步骤3:&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;//配置.env文件的mysql配置&lt;/span&gt;
php artisan migrate 
&lt;span class=&quot;comment&quot;&gt;//1.新成员直接一句命令，数据库就已经生成好了； &lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;//2.上线不用手动执行SQL，脚本更新完代码之后自动执行命令，生成表结构&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;table-schema.png&quot; alt=&quot;表结构&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;步骤4:&quot;&gt;步骤4:&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;//回滚上一次的数据库操作&lt;/span&gt;
php aritsan migrate:rollback --step=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;More Documents: &lt;a href=&quot;https://laravel.com/docs/5.4/migrations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://laravel.com/docs/5.4/migrations&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;背景&lt;/h3&gt;&lt;p&gt;现在我们的开发 -&amp;gt; 测试 -&amp;gt; 线上 环境的SQL脚本，都是通过手动拷贝SQL，然后交由DBA手动执行；&lt;/p&gt;
&lt;p&gt;这样会存在一些问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们忘记记录SQL，上线直接报错&lt;/li&gt;
&lt;li&gt;DB
    
    </summary>
    
      <category term="Code" scheme="http://yangfan-onion.github.io/categories/Code/"/>
    
    
      <category term="Laravel" scheme="http://yangfan-onion.github.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>Laravel「1.0-RESTful-API」</title>
    <link href="http://yangfan-onion.github.io/Laravel%E3%80%8C1.0-RESTful-API%E3%80%8D/"/>
    <id>http://yangfan-onion.github.io/Laravel「1.0-RESTful-API」/</id>
    <published>2017-06-08T15:40:11.000Z</published>
    <updated>2017-06-08T15:57:35.000Z</updated>
    
    <content type="html">&lt;p&gt;前段时间在公司做了一个Laravel分享，主要内容是Laravel如何优化我们的&lt;strong&gt;工作流&lt;/strong&gt;。&lt;br&gt;希望大家有机会也考虑下如何用Laravel优化我们的平时工作，做一个学会偷懒的程序员。&lt;/p&gt;
&lt;h4 id=&quot;RESTful_API&quot;&gt;RESTful API&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://www.evernote.com/shard/s451/sh/1a43c0a6-fdd0-4c60-af51-15e9da561b3a/03730d4d21affc36&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.evernote.com/shard/s451/sh/1a43c0a6-fdd0-4c60-af51-15e9da561b3a/03730d4d21affc36&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;创建RESTful_API资源:&quot;&gt;创建RESTful API资源:&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;php artisan make:controller PhotoController &lt;span class=&quot;comment&quot;&gt;--resource&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;注册RESTful_API路由:&quot;&gt;注册RESTful API路由:&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;//routes/api.php&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;Route&lt;/span&gt;::&lt;span class=&quot;function&quot;&gt;resource&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;photos&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;PhotoController&#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;查看路由列表：&quot;&gt;查看路由列表：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;php artisan route:&lt;span class=&quot;type&quot;&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;URI-List.png&quot; alt=&quot;URI-List&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;开启服务,访问localhost:8000&quot;&gt;开启服务,访问localhost:8000&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;title&quot;&gt;php&lt;/span&gt; artisan serve
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间在公司做了一个Laravel分享，主要内容是Laravel如何优化我们的&lt;strong&gt;工作流&lt;/strong&gt;。&lt;br&gt;希望大家有机会也考虑下如何用Laravel优化我们的平时工作，做一个学会偷懒的程序员。&lt;/p&gt;
&lt;h4 id=&quot;RESTful_API&quot;&gt;RES
    
    </summary>
    
      <category term="Code" scheme="http://yangfan-onion.github.io/categories/Code/"/>
    
    
      <category term="Laravel" scheme="http://yangfan-onion.github.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>写给大家的设计书［读书笔记］</title>
    <link href="http://yangfan-onion.github.io/%E5%86%99%E7%BB%99%E5%A4%A7%E5%AE%B6%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B9%A6%EF%BC%BB%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%BD/"/>
    <id>http://yangfan-onion.github.io/写给大家的设计书［读书笔记］/</id>
    <published>2016-11-24T13:40:33.000Z</published>
    <updated>2016-11-24T15:47:57.000Z</updated>
    
    <content type="html">&lt;p&gt;前年朋友推荐，买了一本《写给大家的设计书》这本书，前前后后反复看了三遍，看完后觉得很不错。纠正了之前的审美，以及知道了一些排版，室内设计等为什么美，学会了在生活中利用设计原则，规范自己的排版，应该算是居家必备，对大家日常生活工作都是有帮助的好书。&lt;/p&gt;
&lt;h3 id=&quot;好的设计的四个重要的原则：&quot;&gt;好的设计的四个重要的原则：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;亲密性&lt;/li&gt;
&lt;li&gt;对齐&lt;/li&gt;
&lt;li&gt;重复&lt;/li&gt;
&lt;li&gt;对比&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;亲密性&quot;&gt;亲密性&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;亲密性是指：讲相关的项组织在一起，移动这些项，使它们的物理位置相互靠近，这样以来，相关的项将被看作凝聚力一体的一个组，而不再是一堆彼此无关的片段。&lt;/p&gt;
&lt;p&gt;物理位置接近就意味着存在关联（实际生活中也是如此，比如我们PC组的组员的坐在一起）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;第一组对比图：&quot;&gt;第一组对比图：&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;sample1.jpg&quot; alt=&quot;xxx&quot;&gt;&lt;br&gt;&lt;img src=&quot;sample2.jpg&quot; alt=&quot;xxx&quot;&gt;&lt;br&gt;&lt;img src=&quot;sample3.jpg&quot; alt=&quot;xxx&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;第一张&lt;/code&gt;，&lt;code&gt;第二张&lt;/code&gt;，Mermaid Tavern［店名：美人鱼客栈］ Ralph Roister Doister［人名：拉尔夫］（717）555－1212［联系电话］等等，杂乱无章的摆放在一起，容易分散人的注意力&lt;/p&gt;
&lt;p&gt;&lt;code&gt;第三张&lt;/code&gt;：上面是店名和人名加粗，字号加大，靠在一起，说明它们才是这张名片的主体， 下面的联系电话，地址，城市是附属信息，用来说明主体。&lt;/p&gt;
&lt;hr&gt;
&lt;h5 id=&quot;第二组对比图：&quot;&gt;第二组对比图：&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;sample4.jpg&quot; alt=&quot;xxx&quot;&gt;&lt;/p&gt;
&lt;p&gt;左边的图&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一级分类和二级分类标题之间没有明显区别 ＝&amp;gt; 不清楚谁是一级分类&lt;/li&gt;
&lt;li&gt;一级分类之间没有明显间隔 ＝&amp;gt; 不清楚这个分类是属于上一级分类，还是下一级&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;右边的图&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一级分类和二级分类字体的粗细和大小都有明显区分 ＝&amp;gt; 一眼就能看清楚谁是几级分类&lt;/li&gt;
&lt;li&gt;父分类和子分类的亲密性跟好，和上级分类更加疏远 ＝&amp;gt; 一眼就能看清楚谁是谁的子类&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&quot;对齐&quot;&gt;对齐&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;｀任何元素都不能在页面上随意安放， 每一项都应担与页面上的某个内容存在某种视觉上的联系｀。对齐原则要求特别小心，再不能像从前那样，只要页面上刚好有空间就把元素随意的“扔”到那里&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;第一组对比图：-1&quot;&gt;第一组对比图：&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;sample1.jpg&quot; alt=&quot;xxx&quot;&gt;&lt;br&gt;&lt;img src=&quot;sample5.jpg&quot; alt=&quot;xxx&quot;&gt;&lt;/p&gt;
&lt;p&gt;第一张图，中间的文字，是没有明显的对齐，这就违背了对齐的原则［每一项都应担与页面上的某个内容存在某种视觉上的联系］&lt;br&gt;第二张图，居中对齐［相对来说最保守的对齐方式］&lt;br&gt;第三张图，右对齐，形成视觉上的联系&lt;/p&gt;
&lt;hr&gt;
&lt;h5 id=&quot;第二组对比图：-1&quot;&gt;第二组对比图：&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;sample6.jpg&quot; alt=&quot;xxx&quot;&gt;&lt;br&gt;&lt;img src=&quot;sample7.jpg&quot; alt=&quot;xxx&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h5 id=&quot;第三组对比图：&quot;&gt;第三组对比图：&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;sample8.jpg&quot; alt=&quot;xxx&quot;&gt;&lt;br&gt;&lt;img src=&quot;sample9.jpg&quot; alt=&quot;xxx&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;重复&quot;&gt;重复&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;“设计的某些方面需要在整个作品中重复” 重复元素可能是一种粗字体，一条粗线，某个项目符号／颜色／设计要素，某种格式，空间关系等。读者能看到的任何方面都可以作为重复元素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;sample10.jpg&quot; alt=&quot;xxx&quot;&gt;&lt;br&gt;&lt;img src=&quot;sample11.jpg&quot; alt=&quot;xxx&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;对比&quot;&gt;对比&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;对比是为了让页面增加视觉效果的最有效的途径之一，对比需要强烈，千万不要畏畏缩缩。 如果两个元素不同，就会产生对比，，倘若两个元素存在某种不同，但是差别不是很大，那么就做出的效果并不是｀对比｀，而是｀冲突｀。这就是关键，如果两个项目不完全相同，就应当使之不同，而且应当使截然不同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;第一组对比图：-2&quot;&gt;第一组对比图：&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;sample12.jpg&quot; alt=&quot;xxx&quot;&gt;&lt;br&gt;&lt;img src=&quot;sample13.jpg&quot; alt=&quot;xxx&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h5 id=&quot;第二组对比图：-2&quot;&gt;第二组对比图：&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;sample14.jpg&quot; alt=&quot;xxx&quot;&gt;&lt;br&gt;&lt;img src=&quot;sample15.jpg&quot; alt=&quot;xxx&quot;&gt;&lt;/p&gt;
&lt;p&gt;－ 去掉居中对齐&lt;br&gt;－ 重要的东西加以强调［头像］&lt;br&gt;－ 找出可以重复的元素［hugs］&lt;br&gt;－ 对比［黑白对比］［灰度对比］［字体大小对比］［字体对比］&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最后我觉得可以上一张IKEA的厨房图，我觉得它对设计原则把握的很好，请大家参照图片，指出哪些地方利用了哪些设计原则&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;sample.jpg&quot; alt=&quot;xxx&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前年朋友推荐，买了一本《写给大家的设计书》这本书，前前后后反复看了三遍，看完后觉得很不错。纠正了之前的审美，以及知道了一些排版，室内设计等为什么美，学会了在生活中利用设计原则，规范自己的排版，应该算是居家必备，对大家日常生活工作都是有帮助的好书。&lt;/p&gt;
&lt;h3 id=&quot;好
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git 日常使用</title>
    <link href="http://yangfan-onion.github.io/Git-%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8/"/>
    <id>http://yangfan-onion.github.io/Git-日常使用/</id>
    <published>2016-07-02T11:15:27.000Z</published>
    <updated>2016-07-02T11:24:42.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Git&quot;&gt;Git&lt;/h1&gt;&lt;h6 id=&quot;推荐一个Git教程&quot;&gt;推荐一个Git教程&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://backlogtool.com/git-guide/cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://backlogtool.com/git-guide/cn/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;推荐一本书&quot;&gt;推荐一本书&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;Pro Git&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Git常用命令&quot;&gt;Git常用命令&lt;/h1&gt;&lt;h3 id=&quot;配置提交用户名和邮箱&quot;&gt;配置提交用户名和邮箱&lt;/h3&gt;&lt;p&gt;git config –global user.name “John Doe”&lt;/p&gt;
&lt;p&gt;git config –global user.email johndoe@example.com&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;-gitignore&quot;&gt;.gitignore&lt;/h3&gt;&lt;p&gt;需要忽略的文件，我们需要将自己的IDE生成的文件，编译文件，缓存文件等加入忽略列表&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;Runtime/ 忽略整个Runtime文件夹&lt;/p&gt;
&lt;p&gt;.project 忽略IDE生成的临时文件&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;-gitattributes&quot;&gt;.gitattributes&lt;/h3&gt;&lt;p&gt;可以添加合并的策略 配合使用：git config –global merge.ours.driver true&lt;/p&gt;
&lt;p&gt;/Project/Common/Conf/dbconn.php merge=ours 合并分支时，使用当前分支的这个文件&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;日常操作&quot;&gt;日常操作&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;git status 查看工作空间的状态&lt;/li&gt;
&lt;li&gt;git pull origin develop 拉取远程指定分支代码, 建议开发时，每两个小时执行一次&lt;/li&gt;
&lt;li&gt;git add . 将当前目录下所有修改加入提交队列 或者 git add /folder/sub-folder/example.txt 将某个具体文件加入提交队列&lt;/li&gt;
&lt;li&gt;git commit -m ‘提交注释’ 提交代码（到本地队列）&lt;/li&gt;
&lt;li&gt;git push origin develop 推送提交的代码到远程服务器&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&quot;保存工作空间（需要临时切换分支进行紧急修复，但是当前工作空间有文件修改）&quot;&gt;保存工作空间（需要临时切换分支进行紧急修复，但是当前工作空间有文件修改）&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;git stash&lt;/li&gt;
&lt;li&gt;git stash pop&lt;/li&gt;
&lt;li&gt;git stash list&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&quot;合并分支操作&quot;&gt;合并分支操作&lt;/h3&gt;&lt;p&gt;以合并develop到stage为例，合并之前保持分支无任何文件需要提交，且为最新代码(git pull更新)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;git merge develop 或者 git merge 99daed2(develop分支的某一次提交的版本号)&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&quot;合并指定的某一次提交到指定分支&quot;&gt;合并指定的某一次提交到指定分支&lt;/h3&gt;&lt;p&gt;以合并develop的某一次提交到stage为例&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;git cherry-pick 99daed2(develop分支的某一次提交的版本号)&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&quot;撤销最近一次提交&quot;&gt;撤销最近一次提交&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;git-concept.png&quot; alt=&quot;png&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;git reset –soft HEAD^1 只是抹去了提交历史，需要重新commit&lt;/li&gt;
&lt;li&gt;git reset –mixed HEAD^1 抹去了提交历史和缓存快照 ，需要重新add, 重新commit&lt;/li&gt;
&lt;li&gt;git reset –hard HEAD^1 抹去了提交历史，缓存快照，工作空间（工作空间的修改全部消失，&lt;strong&gt;谨慎，再谨慎&lt;/strong&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;假定文件未修改&quot;&gt;假定文件未修改&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;git update-index –[no]assume-unchanged www/index.php&lt;/li&gt;
&lt;li&gt;git update-index –[no]skip-worktree www/index.php&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git&quot;&gt;Git&lt;/h1&gt;&lt;h6 id=&quot;推荐一个Git教程&quot;&gt;推荐一个Git教程&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://backlogtool.com/git-guide/cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;
    
    </summary>
    
      <category term="Code" scheme="http://yangfan-onion.github.io/categories/Code/"/>
    
    
      <category term="Git" scheme="http://yangfan-onion.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab webhook</title>
    <link href="http://yangfan-onion.github.io/Gitlab-webhook/"/>
    <id>http://yangfan-onion.github.io/Gitlab-webhook/</id>
    <published>2016-07-02T10:15:39.000Z</published>
    <updated>2016-07-02T11:33:44.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Git&amp;amp;Gitlab&quot;&gt;Git&amp;amp;Gitlab&lt;/h1&gt;&lt;p&gt;这段时间公司从SVN切换到Git, 本来想选择Github，无奈Github企业版价格太高，转而自己搭建了Gitlab的社区版。&lt;/p&gt;
&lt;h1 id=&quot;Gitlab的坑&quot;&gt;Gitlab的坑&lt;/h1&gt;&lt;p&gt;2G RAM + 1G swap;可以支持100个User。之前我搭建的时候忘记设立swap;隔一段时间Gitlab就报500 error;&lt;/p&gt;
&lt;p&gt;解决办法参考&lt;a href=&quot;http://stackoverflow.com/questions/26777690/gitlab-500-error-when-adding-removing-ssh-key&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;自动化部署&quot;&gt;自动化部署&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://gitlab.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gitlab&lt;/a&gt;支持&lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/web_hooks/web_hooks.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Webhook&lt;/a&gt;，支持通知的类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;push events&lt;/li&gt;
&lt;li&gt;tag events&lt;/li&gt;
&lt;li&gt;issue events&lt;/li&gt;
&lt;li&gt;comment events&lt;/li&gt;
&lt;li&gt;comment on merge request&lt;/li&gt;
&lt;li&gt;comment on issue&lt;/li&gt;
&lt;li&gt;comment on code snippet&lt;/li&gt;
&lt;li&gt;merge request events&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以根据自己的需要进行监听，我们需要代码发布自动化。我选择了push events&lt;/p&gt;
&lt;h3 id=&quot;实施方法&quot;&gt;实施方法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在后台建立php版本的webhook: &lt;a href=&quot;http://www.example.com/webhook.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.example.com/webhook.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;webhook.phpn内容如下&lt;/li&gt;
&lt;li&gt;执行exec(‘whoami’), 查看PHP脚本的拥有者，我这里是apache&lt;/li&gt;
&lt;li&gt;chown -R apache:apache /web/project_directory //网站目录owner:group调整为apache&lt;/li&gt;
&lt;li&gt;chown -R apache:apache /var/www/.ssh //私钥的目录owner:group调整为apache&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//webhook.php&amp;#10;&amp;#60;?php&amp;#10;&amp;#9;$client_token = $_SERVER[&amp;#39;HTTP_X_GITLAB_TOKEN&amp;#39;];&amp;#10;&amp;#9;$event = $_SERVER[&amp;#39;HTTP_X_GITLAB_EVENT&amp;#39;];&amp;#10;&amp;#9;$client_ip = $_SERVER[&amp;#39;REMOTE_ADDR&amp;#39;];&amp;#10;&amp;#9;$access_ip = array(&amp;#39;xxx.xxx.xxx.xxx&amp;#39;);&amp;#10;&amp;#9;&amp;#10;&amp;#9;//file_put_contents(&amp;#39;gitlab-deploy.log&amp;#39;, $client_token . &amp;#34;\n&amp;#34;, FILE_APPEND);&amp;#10;&amp;#10;&amp;#9;if($client_token != &amp;#39;your-token&amp;#39;)&amp;#123;&amp;#10;&amp;#9;    echo &amp;#34;error 403&amp;#34;;&amp;#10;&amp;#9;    fwrite($fs, &amp;#34;Invalid token [&amp;#123;$client_token&amp;#125;]&amp;#34;.PHP_EOL);&amp;#10;&amp;#9;    exit(0);&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;// access ip&amp;#10;&amp;#9;if (!in_array($client_ip, $access_ip))&amp;#123;&amp;#10;&amp;#9;    echo &amp;#34;error 503&amp;#34;;&amp;#10;&amp;#9;    fwrite($fs, &amp;#34;Invalid ip [&amp;#123;$client_ip&amp;#125;]&amp;#34;.PHP_EOL);&amp;#10;&amp;#9;    exit(0);&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;if($event == &amp;#39;Push Hook&amp;#39;)&amp;#123;&amp;#10;&amp;#9;    // get json data&amp;#10;&amp;#9;    $input = file_get_contents(&amp;#34;php://input&amp;#34;);&amp;#10;&amp;#9;    $json  = json_decode($input, true);&amp;#10;&amp;#10;&amp;#9;    //file_put_contents(&amp;#39;gitlab-deploy.log&amp;#39;, json_encode($_SERVER) . &amp;#34;\n&amp;#34;, FILE_APPEND);&amp;#10;&amp;#9;    if($json[&amp;#39;project&amp;#39;][&amp;#39;name&amp;#39;] != &amp;#39;pc-dhb168&amp;#39;)&amp;#123;&amp;#10;&amp;#9;        exit(0);&amp;#10;&amp;#9;    &amp;#125;&amp;#10;&amp;#10;&amp;#9;    $branch = $json[&amp;#39;ref&amp;#39;];&amp;#10;&amp;#9;    switch($branch)&amp;#123;&amp;#10;&amp;#9;        case &amp;#39;refs/heads/stage&amp;#39;:&amp;#10;&amp;#9;            exec(&amp;#34;cd /web/project/;/usr/bin/git pull origin stage 2&amp;#62;&amp;#38;1&amp;#34;, $output, $result);&amp;#10;&amp;#9;            break;&amp;#10;&amp;#9;        case &amp;#39;refs/heads/api&amp;#39;:&amp;#10;&amp;#9;            exec(&amp;#34;cd /web/project_api/;/usr/bin/git pull origin api 2&amp;#62;&amp;#38;1&amp;#34;, $output, $result);&amp;#10;&amp;#9;            break;&amp;#10;&amp;#9;        case &amp;#39;refs/heads/platform&amp;#39;:&amp;#10;&amp;#9;            exec(&amp;#34;cd /web/project_platform/;/usr/bin/git pull origin platform 2&amp;#62;&amp;#38;1&amp;#34;, $output, $result);&amp;#10;&amp;#9;            break;&amp;#10;&amp;#9;        default:&amp;#10;&amp;#9;            break;&amp;#10;&amp;#9;    &amp;#125;&amp;#10;&amp;#9;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;exec调试&quot;&gt;exec调试&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//&amp;#26597;&amp;#30475;exec&amp;#30340;&amp;#25191;&amp;#34892;&amp;#32467;&amp;#26524;&amp;#10;exec(&amp;#34;cd /web/project/;/usr/bin/git pull origin stage 2&amp;#62;&amp;#38;1&amp;#34;, $output);&amp;#10;var_dump($output)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git&amp;amp;Gitlab&quot;&gt;Git&amp;amp;Gitlab&lt;/h1&gt;&lt;p&gt;这段时间公司从SVN切换到Git, 本来想选择Github，无奈Github企业版价格太高，转而自己搭建了Gitlab的社区版。&lt;/p&gt;
&lt;h1 id=&quot;Gitlab的坑&quot;&gt;Gitlab的
    
    </summary>
    
      <category term="Code" scheme="http://yangfan-onion.github.io/categories/Code/"/>
    
    
      <category term="Git" scheme="http://yangfan-onion.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Chrome DevTools tips and tricks</title>
    <link href="http://yangfan-onion.github.io/Chrome-DevTools-tips-and-tricks/"/>
    <id>http://yangfan-onion.github.io/Chrome-DevTools-tips-and-tricks/</id>
    <published>2016-04-07T13:00:05.000Z</published>
    <updated>2016-04-12T15:39:49.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Elements&quot;&gt;Elements&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;选择元素按H可以显示和隐藏当前元素，省去了手动添加(display:none;)操作&lt;/li&gt;
&lt;li&gt;为元素添加Subtree modification, Attribute modification, Node removal监听&lt;/li&gt;
&lt;li&gt;Event Listeners 可以查看当前选中元素有事件，可以绑定到祖先元素上的事件，并且可以查看事件的代码&lt;/li&gt;
&lt;li&gt;Toggle Element state可以查看当前元素的:active, :focus, :hover, :visited样式&lt;/li&gt;
&lt;li&gt;Ctrl+F支持子节点查找 form input&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Console&quot;&gt;Console&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;$0 =&amp;gt; 选择当前选中的元素， 右键可以修改&lt;/li&gt;
&lt;li&gt;$(‘img’) =&amp;gt; document.querySelector&lt;/li&gt;
&lt;li&gt;$$(‘img’) ＝&amp;gt; document.querySelectorAll&lt;/li&gt;
&lt;li&gt;console.table([{a:1, b:2, c:3}, {a:”foo”, b:false, c:undefined}]);&lt;/li&gt;
&lt;li&gt;dir($0)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;debug(functionName) &amp;amp;&amp;amp; undebug 控制台中打断点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;profile(“My profile”) &amp;amp;&amp;amp; profileEnd(“My profile”) 用于统计性能消耗&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Sources&quot;&gt;Sources&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;可以在代码中添加debugger; 程序在执行时会在此断点&lt;/li&gt;
&lt;li&gt;动态加载的JS代码调试， 代码头部加入 // @sourceURL=example.js 通知DevTools&lt;/li&gt;
&lt;li&gt;Ctrl + P可以查找任意文件&lt;/li&gt;
&lt;li&gt;Ctrl + P + : + 行号跳转到文件相应行&lt;/li&gt;
&lt;li&gt;Ctrl+Shift+O可以跳转到任意方法&lt;/li&gt;
&lt;li&gt;左下角的{}可以格式化压缩的JS,CSS方便查看代码调试&lt;/li&gt;
&lt;li&gt;添加断点调试JS, 添加条件断点&lt;/li&gt;
&lt;li&gt;单步跳过，进入，跳出方法, black box, 跳过jquery, angular的源代码，只在我们自己写的代码中调试&lt;/li&gt;
&lt;li&gt;添加表达式&lt;/li&gt;
&lt;li&gt;函数的调用栈&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Network&quot;&gt;Network&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Filter可以多选&lt;/li&gt;
&lt;li&gt;size/content可以进行优化判断 size:文件传输大小, content:实际大小;  size=Gzip(文件大小)+response header的大小&lt;/li&gt;
&lt;li&gt;非二进制文件的size等于content说明未开启Gzip, 需要优化&lt;/li&gt;
&lt;li&gt;size大于content, 一般是小图片，可能20B大小，size中还包含了response_headers的大小，所以切图的时候，可以把多个小图片做成一张雪碧图，一是减少网络请求，二是可以减少过多response header的传输浪费&lt;/li&gt;
&lt;li&gt;time/latency =&amp;gt; 总时间/等待时间  开始时间到TTFB(首字节加载时间)就是等待时间&lt;/li&gt;
&lt;li&gt;initator 资源是由谁请求的， 解释器或者自定义的JS，由JS发起的会存在一些延迟&lt;/li&gt;
&lt;li&gt;HAR(HTTP Archive)前后台开发人员协作优化性能问题 &lt;a href=&quot;http://ericduran.github.io/chromeHAR/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ericduran.github.io/chromeHAR/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DOMContent event Fire（解释完当前页面）蓝线， Load Event Fire（加载完所有资源）红线&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&quot;浏览器并发请求数&quot;&gt;浏览器并发请求数&lt;/h6&gt;&lt;p&gt;为了复用已存在在的连接，浏览器对同一域名的并发请求是有限的, 以下是各种浏览器的并发数量&lt;br&gt;&lt;img src=&quot;screenshot1.jpg&quot; alt=&quot;浏览器请求并发数&quot;&gt;&lt;/p&gt;
&lt;h6 id=&quot;zhihu-com的网络请求截屏&quot;&gt;zhihu.com的网络请求截屏&lt;/h6&gt;&lt;p&gt;&lt;img src=&quot;screenshot.jpg&quot; alt=&quot;domain&quot;&gt;&lt;/p&gt;
&lt;p&gt;如图，有的请求会持续很长时间，如果把 img, css, js… 都放到 &lt;a href=&quot;http://zhihu.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zhihu.com&lt;/a&gt; 一个域名下面，其他请求就迟迟无法完成，浏览者看来就是『卡住了』。而把图片放到 &lt;a href=&quot;http://zhimg.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zhimg.com&lt;/a&gt; 之后，css和图片就可以并发请求了。知乎使用了pic1.zhimg.com | pic2.zhimg.com | pic3.zhimg.com | pic3.zhimg.com&lt;br&gt;而且这4个域名是cookie free的&lt;/p&gt;
&lt;p&gt;可以参考下图&lt;br&gt;&lt;img src=&quot;cookie_free.png&quot; alt=&quot;cookie free&quot;&gt;&lt;br&gt;&lt;img src=&quot;cookie_free1.png&quot; alt=&quot;cookie free&quot;&gt;&lt;/p&gt;
&lt;h6 id=&quot;Capture_Filmstrip_以订货宝官网为例&quot;&gt;Capture Filmstrip 以订货宝官网为例&lt;/h6&gt;&lt;p&gt;&lt;img src=&quot;first-screen.png&quot; alt=&quot;首屏优化&quot;&gt;&lt;br&gt;844ms呈现出来的无意义的首屏，这时html+js+css下载完成&lt;br&gt;DOM+Javascript+CSSOM =&amp;gt; Render Tree&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;first-screen-1.png&quot; alt=&quot;首屏优化&quot;&gt;&lt;br&gt;1.80s的首屏截图， 此时订货宝的Logo还未加载出来，为什么？？&lt;br&gt;&lt;img src=&quot;frist-screen-2.png&quot; alt=&quot;首屏优化&quot;&gt;&lt;br&gt;仔细看logo.png的网络请求， Queueing: 521ms，TTFB: 1.17s， Content Download: 32ms&lt;/p&gt;
&lt;h6 id=&quot;如何优化Queueing，_Stalled&quot;&gt;如何优化Queueing， Stalled&lt;/h6&gt;&lt;ol&gt;
&lt;li&gt;&lt;em&gt;资源优先级&lt;/em&gt; 图片的优先级一般是低于html, css, js的，可以在Network的选项卡里调出优先级一列&lt;/li&gt;
&lt;li&gt;&lt;em&gt;同一域名网络请求并发数&lt;/em&gt; chrome 6个&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;排队时间高就是因为并发的6个链接正在处理优先级高的资源，要等到优先级高的资源处理完了，在复用这些链接请求优先级更低的资源&lt;br&gt;这个时候我们将图片换到另外的域名下，在同一优先级的图片下面，logo.png是会优先排队的，这样就可以避免排队时间的过多的消耗，&lt;/p&gt;
&lt;p&gt;鱼与熊掌不可兼得，放到另外的域名下，DNS查询也是会增加消耗的，一般2～4个为宜&lt;/p&gt;
&lt;h6 id=&quot;如何优化TTFB&quot;&gt;如何优化TTFB&lt;/h6&gt;&lt;p&gt;TTFB 是一个可以优化的点，利用CDN, 让内容距离用户更近，更快的服务器响应&lt;/p&gt;
&lt;h6 id=&quot;如何优化Content_Download&quot;&gt;如何优化Content Download&lt;/h6&gt;&lt;p&gt;减小内容大小；&lt;br&gt;特别是在首次加载，TCP连接在开始是很慢的，window size是很小的，~14kb, 超过14kb的内容需要另外的TCP包进行传输，会增加一个round trip time(来回时间)，在来回时间很长的情况下，会拖慢首次加载的速度&lt;/p&gt;
&lt;p&gt;throttling&lt;br&gt;切换网络限速&lt;br&gt;custom throttling&lt;br&gt;自定义网络限速&lt;/p&gt;
&lt;p&gt;Chrome Canary: request block to diagnose which resources slowdown the first meaningful screen&lt;/p&gt;
&lt;h4 id=&quot;Timeline&quot;&gt;Timeline&lt;/h4&gt;&lt;p&gt;－ 蓝线表示DOMContentLoaded event&lt;br&gt;－ 绿线表示首次绘制页面&lt;br&gt;－ 红线表示load event.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;timeline.png&quot; alt=&quot;timeline&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这个时间区间，各种操作所占的比例&lt;/li&gt;
&lt;li&gt;比例所对应的图表&lt;/li&gt;
&lt;li&gt;FPS &amp;amp; CPU &amp;amp; NET 哪一个颜色越深，高度越高，表示这段时间的消耗越多&lt;/li&gt;
&lt;li&gt;红色的三角表示这个时间段 画面有卡顿，低于60FPS&lt;/li&gt;
&lt;li&gt;这个区间可用鼠标上下滚动查看，详细到每一个请求的完成，每一次方法的执行&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Profiles&quot;&gt;Profiles&lt;/h4&gt;&lt;p&gt;网页的性能问题，JS的性能问题&lt;/p&gt;
&lt;h4 id=&quot;Resource&quot;&gt;Resource&lt;/h4&gt;&lt;p&gt;资源，cookie, localstorage&lt;/p&gt;
&lt;h4 id=&quot;Audits&quot;&gt;Audits&lt;/h4&gt;&lt;p&gt;评审网站，cache file, remove unuse css&lt;/p&gt;
&lt;h4 id=&quot;pagespeed_extension&quot;&gt;pagespeed extension&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/pagespeed-insights-by-goo/gplegfbjlmmehdoakndmohflojccocli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://chrome.google.com/webstore/detail/pagespeed-insights-by-goo/gplegfbjlmmehdoakndmohflojccocli&lt;/a&gt;&lt;br&gt;optimize image&lt;/p&gt;
&lt;h4 id=&quot;pagespeed_的nginx和Apache扩展&quot;&gt;pagespeed 的nginx和Apache扩展&lt;/h4&gt;&lt;p&gt;前面提到的TCP slow start的问题&lt;br&gt;我们应该优化关键帧，保证关键帧首先呈现给用户，关键的css, js应该使用内敛的方式放在html中&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Elements&quot;&gt;Elements&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;选择元素按H可以显示和隐藏当前元素，省去了手动添加(display:none;)操作&lt;/li&gt;
&lt;li&gt;为元素添加Subtree modification, Attribute modificatio
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL存储引擎</title>
    <link href="http://yangfan-onion.github.io/%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yangfan-onion.github.io/高性能MySQL读书笔记/</id>
    <published>2015-11-30T12:32:51.000Z</published>
    <updated>2017-07-09T16:36:17.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;MySQL存储引擎&quot;&gt;MySQL存储引擎&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;MyISAM：不支持外键，不支持事务&lt;/li&gt;
&lt;li&gt;InnoDB：支持外键，支持事务&lt;/li&gt;
&lt;li&gt;Archive：压缩存储，存储的空间比MyISAM更小，Select操作需要全表扫描，适合存放系统日志&lt;/li&gt;
&lt;li&gt;Memory：存放在内存中，速度比MyISAM快一个数量级&lt;/li&gt;
&lt;li&gt;Blackhole&lt;/li&gt;
&lt;li&gt;CSV：可以直接将CSV导入到数据库&lt;/li&gt;
&lt;li&gt;Federated&lt;/li&gt;
&lt;li&gt;NDB集群&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;选择合适的存储引擎&quot;&gt;选择合适的存储引擎&lt;/h2&gt;&lt;p&gt;除非需要某些InnoDB不支持的特性，并且没有替代方案，否则首先考虑InnoDB&lt;br&gt;如果需要使用全文索引，优先考虑使用MyISAM＋Sphinx&lt;/p&gt;
&lt;p&gt;－ 事务&lt;br&gt;－ 备份：如果可以容忍停机备份，那么MyISAM就可以，如果不能忍受，那么InnoDB会更好&lt;br&gt;－ 崩溃恢复：MyISAM恢复需要更长的时间，崩溃后数据损坏的可能性比InnoDB大的多&lt;br&gt;－ 特有特性：例如：MyISAM才支持地理范围搜索&lt;/p&gt;
&lt;h2 id=&quot;日志应用&quot;&gt;日志应用&lt;/h2&gt;&lt;p&gt;如果需要将应用的日志记录到MySQL，那么MyISAM和Archive引擎就非常适合这种应用场景，而且速度非常快，但是如果需要同时分析日志，同时进行读写，会导致MySQL效率降低，可以采用主从备份的方式，将日志备份到从库再进行分析&lt;br&gt;另一种办法是，将日志切分到较小时间维度，t_log_20150906，t_log_20150907，这样在空闲的表上进行日志分析，就可以达到一个高效率了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MySQL存储引擎&quot;&gt;MySQL存储引擎&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;MyISAM：不支持外键，不支持事务&lt;/li&gt;
&lt;li&gt;InnoDB：支持外键，支持事务&lt;/li&gt;
&lt;li&gt;Archive：压缩存储，存储的空间比MyISAM更小，Select操作需要全表扫描，适
    
    </summary>
    
      <category term="Code" scheme="http://yangfan-onion.github.io/categories/Code/"/>
    
    
      <category term="MySQL" scheme="http://yangfan-onion.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Markdown相关</title>
    <link href="http://yangfan-onion.github.io/Markdown%E7%9B%B8%E5%85%B3/"/>
    <id>http://yangfan-onion.github.io/Markdown相关/</id>
    <published>2015-10-24T12:53:43.000Z</published>
    <updated>2016-04-08T12:59:59.000Z</updated>
    
    <content type="html">&lt;p&gt;#Markdown的应用场景&lt;/p&gt;
&lt;h3 id=&quot;什么是Markdown:_https://zh-wikipedia-org/wiki/Markdown&quot;&gt;什么是Markdown: &lt;a href=&quot;https://zh.wikipedia.org/wiki/Markdown&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://zh.wikipedia.org/wiki/Markdown&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;Markdown可以用来干什么:&quot;&gt;Markdown可以用来干什么:&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;博客写作， &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;，&lt;/li&gt;
&lt;li&gt;文档写作， GitHub README.md, API document&lt;/li&gt;
&lt;li&gt;笔记记录， 结合印象笔记的&lt;a href=&quot;https://maxiang.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;马克飞象&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;博客写作&quot;&gt;博客写作&lt;/h3&gt;&lt;p&gt;Hexo是一个使用NodeJS的静态文本生成器，比较Geek，Github提供了静态文件托管的功能，Git Page应运而生。我们可以将Hexo生成的静态文件托管到Github，搭建一个属于自己的博客，&lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;教程链接戳我&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;文档写作&quot;&gt;文档写作&lt;/h3&gt;&lt;p&gt;Github对*.md有自己的&lt;a href=&quot;https://gist.github.com/tuzz/3331384&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解析样式&lt;/a&gt;,可以参考一下。Github将Markdown解析成对应的Html,然后用前面的样式进行渲染，我们也可以在此基础上面进行二次开发，例如增加对代码片段的不同语言的语法支持，Javascript, Java, CSS等等&lt;/p&gt;
&lt;p&gt;我们团队开发API的时候也可以用到Markdown&lt;br&gt;先分目录，WEB-API, APP-API&lt;br&gt;再分别写API目录， web-api-summary.md, app-api-summary.md，这两个markdown文件里面全是对子markdown的链接，方便查找&lt;br&gt;最后再写API详情， F0010.md， F0020.md， F0030.md，每个文档之间留够10个空隙，以备日后新增API&lt;/p&gt;
&lt;p&gt;这样项目开发人员可以通过GitHub在线共享开发文档，可以很直观的进行编辑。Markdown的语法对于程序员们来说应该是很亲切的了。&lt;/p&gt;
&lt;h3 id=&quot;笔记记录&quot;&gt;笔记记录&lt;/h3&gt;&lt;p&gt;印象笔记唯一不爽的我觉得是对Markdown的支持，其他的简直完美无缺。有了马克飞象，对于程序员们来说真的就是飞了起来的感觉。&lt;/p&gt;
&lt;h3 id=&quot;Markdown_plugin_&amp;amp;_Markdown_App&quot;&gt;Markdown plugin &amp;amp; Markdown App&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;宇宙最好编辑器Sublime Text 的&lt;a href=&quot;https://github.com/revolunet/sublimetext-markdown-preview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sublimetext-markdown-preview插件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://25.io/mou/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mou&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;#Markdown的应用场景&lt;/p&gt;
&lt;h3 id=&quot;什么是Markdown:_https://zh-wikipedia-org/wiki/Markdown&quot;&gt;什么是Markdown: &lt;a href=&quot;https://zh.wikipedia.org/wiki/Markd
    
    </summary>
    
    
      <category term="Markdown" scheme="http://yangfan-onion.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Redis Mass Insertion</title>
    <link href="http://yangfan-onion.github.io/Redis-Mass-Insertion/"/>
    <id>http://yangfan-onion.github.io/Redis-Mass-Insertion/</id>
    <published>2015-10-22T07:59:27.000Z</published>
    <updated>2015-10-22T09:07:27.000Z</updated>
    
    <content type="html">&lt;p&gt;Sometimes Redis instances needs to be loaded with big amount of preexisting or user generated data in a short amount of time, so that millions of keys will be created as fast as possible.&lt;br&gt;This is called a mass insertion, and the goal of this document is to provide information about how to feed Redis with data as fast as possible.&lt;br&gt;Use the protocol, Luke&lt;br&gt;Using a normal Redis client to perform mass insertion is not a good idea for a few reasons: the naive approach of sending one command after the other is slow because you have to pay for the round trip time for every command. It is possible to use pipelining, but for mass insertion of many records you need to write new commands while you read replies at the same time to make sure you are inserting as fast as possible.&lt;br&gt;Only a small percentage of clients support non-blocking I/O, and not all the clients are able to parse the replies in an efficient way in order to maximize throughput. For all this reasons the preferred way to mass import data into Redis is to generate a text file containing the Redis protocol, in raw format, in order to call the commands needed to insert the required data.&lt;br&gt;For instance if I need to generate a large data set where there are billions of keys in the form: `keyN -&amp;gt; ValueN’ I will create a file containing the following commands in the Redis protocol format:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SET Key0 Value0&amp;#10;SET Key1 Value1&amp;#10;...&amp;#10;SET KeyN ValueN&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Once this file is created, the remaining action is to feed it to Redis as fast as possible. In the past the way to do this was to use the netcat with the following command:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(cat data.txt; sleep 10) | nc localhost 6379 &amp;#62; /dev/null&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;However this is not a very reliable way to perform mass import because netcat does not really know when all the data was transferred and can’t check for errors. In 2.6 or later versions of Redis the redis-cli utility supports a new mode called pipe mode that was designed in order to perform mass insertion.&lt;br&gt;Using the pipe mode the command to run looks like the following:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat data.txt | redis-cli --pipe&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;That will produce an output similar to this:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;All data transferred. Waiting for the last reply...&amp;#10;Last reply received from server.&amp;#10;errors: 0, replies: 1000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;The redis-cli utility will also make sure to only redirect errors received from the Redis instance to the standard output.&lt;br&gt;Generating Redis Protocol&lt;br&gt;The Redis protocol is extremely simple to generate and parse, and is Documented here. However in order to generate protocol for the goal of mass insertion you don’t need to understand every detail of the protocol, but just that every command is represented in the following way:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;*&amp;#60;args&amp;#62;&amp;#60;cr&amp;#62;&amp;#60;lf&amp;#62;&amp;#10;$&amp;#60;len&amp;#62;&amp;#60;cr&amp;#62;&amp;#60;lf&amp;#62;&amp;#10;&amp;#60;arg0&amp;#62;&amp;#60;cr&amp;#62;&amp;#60;lf&amp;#62;&amp;#10;&amp;#60;arg1&amp;#62;&amp;#60;cr&amp;#62;&amp;#60;lf&amp;#62;&amp;#10;...&amp;#10;&amp;#60;argN&amp;#62;&amp;#60;cr&amp;#62;&amp;#60;lf&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;Where &lt;cr&gt; means “\r” (or ASCII character 13) and &lt;lf&gt; means “\n” (or ASCII character 10).&lt;br&gt;For instance the command SET key value is represented by the following protocol:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;*3&amp;#60;cr&amp;#62;&amp;#60;lf&amp;#62;&amp;#10;$3&amp;#60;cr&amp;#62;&amp;#60;lf&amp;#62;&amp;#10;SET&amp;#60;cr&amp;#62;&amp;#60;lf&amp;#62;&amp;#10;$3&amp;#60;cr&amp;#62;&amp;#60;lf&amp;#62;&amp;#10;key&amp;#60;cr&amp;#62;&amp;#60;lf&amp;#62;&amp;#10;$5&amp;#60;cr&amp;#62;&amp;#60;lf&amp;#62;&amp;#10;value&amp;#60;cr&amp;#62;&amp;#60;lf&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;Or represented as a quoted string:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#34;*3\r\n$3\r\nSET\r\n$3\r\nkey\r\n$5\r\nvalue\r\n&amp;#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;The file you need to generate for mass insertion is just composed of commands represented in the above way, one after the other.&lt;br&gt;The following Ruby function generates valid protocol:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def gen_redis_proto(*cmd)&amp;#10;    proto = &amp;#34;&amp;#34;&amp;#10;    proto &amp;#60;&amp;#60; &amp;#34;*&amp;#34;+cmd.length.to_s+&amp;#34;\r\n&amp;#34;&amp;#10;    cmd.each&amp;#123;|arg|&amp;#10;        proto &amp;#60;&amp;#60; &amp;#34;$&amp;#34;+arg.to_s.bytesize.to_s+&amp;#34;\r\n&amp;#34;&amp;#10;       &amp;#9;proto &amp;#60;&amp;#60; arg.to_s+&amp;#34;\r\n&amp;#34;&amp;#10;    &amp;#125;&amp;#10;&amp;#9;proto&amp;#10;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;puts gen_redis_proto(“SET”,”mykey”,”Hello World!”).inspect&lt;br&gt;Using the above function it is possible to easily generate the key value pairs in the above example, with this program:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(0...1000).each&amp;#123;|n|&amp;#10;    STDOUT.write(gen_redis_proto(&amp;#34;SET&amp;#34;,&amp;#34;Key#&amp;#123;n&amp;#125;&amp;#34;,&amp;#34;Value#&amp;#123;n&amp;#125;&amp;#34;))&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;We can run the program directly in pipe to redis-cli in order to perform our first mass import session.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ruby proto.rb | redis-cli --pipe&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;All data transferred. Waiting for the last reply…&lt;br&gt;Last reply received from server.&lt;br&gt;errors: 0, replies: 1000&lt;br&gt;How the pipe mode works under the hoods&lt;br&gt;The magic needed inside the pipe mode of redis-cli is to be as fast as netcat and still be able to understand when the last reply was sent by the server at the same time.&lt;br&gt;This is obtained in the following way:&lt;/lf&gt;&lt;/cr&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redis-cli –pipe tries to send data as fast as possible to the server.&lt;/li&gt;
&lt;li&gt;At the same time it reads data when available, trying to parse it.&lt;/li&gt;
&lt;li&gt;Once there is no more data to read from stdin, it sends a special ECHO command with a random 20 bytes string: we are sure this is the latest command sent, and we are sure we can match the reply checking if we receive the same 20 bytes as a bulk reply.&lt;/li&gt;
&lt;li&gt;Once this special final command is sent, the code receiving replies starts to match replies with this 20 bytes. When the matching reply is reached it can exit with success.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using this trick we don’t need to parse the protocol we send to the server in order to understand how many commands we are sending, but just the replies.&lt;br&gt;However while parsing the replies we take a counter of all the replies parsed so that at the end we are able to tell the user the amount of commands transferred to the server by the mass insert session.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Sometimes Redis instances needs to be loaded with big amount of preexisting or user generated data in a short amount of time, so that mil
    
    </summary>
    
      <category term="Code" scheme="http://yangfan-onion.github.io/categories/Code/"/>
    
    
      <category term="redis" scheme="http://yangfan-onion.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Mysql海量数据存储和解决方案之分布式DB方案</title>
    <link href="http://yangfan-onion.github.io/Mysql%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8FDB%E6%96%B9%E6%A1%88/"/>
    <id>http://yangfan-onion.github.io/Mysql海量数据存储和解决方案之分布式DB方案/</id>
    <published>2015-10-21T08:46:55.000Z</published>
    <updated>2016-04-08T13:05:12.000Z</updated>
    
    <content type="html">&lt;ol&gt;
&lt;li&gt;分布式DB水平切分中用到的主要关键技术：分库，分表，M-S,集群，负载均衡&lt;/li&gt;
&lt;li&gt;需求分析：一个大型互联网应用每天几十亿的PV对DB造成了相当高的负载，对系统的稳定性的扩展性带来极大挑战。&lt;/li&gt;
&lt;li&gt;现有解决方式：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;通过数据切分提高网站性能，横向扩展数据层水平切分DB，有效降低了单台机器的负载，也减小了宕机的可能性。&lt;/li&gt;
&lt;li&gt;集群方案：解决DB宕机带来的单点DB不能访问问题。&lt;/li&gt;
&lt;li&gt;读写分离策略：极大限度提高了应用中Read数据的速度和并发量。&lt;/li&gt;
&lt;li&gt;典型例子：Taobao,Alibaba,Tencent，它们大都实现了自己的分布式数据访问层（DDAL）。Taobao的基于ibatis和Spring的的分布式数据访问层，已有多年的应用，运行效率和生产实效性得到了开发人员和用户的肯定。&lt;/li&gt;
&lt;li&gt;水平切分需要考虑的后续问题：分库后路由规则的选择和制定，以及后期扩展。如，如何以最少的数据迁移达到最大容量的扩展。因些路由表分规则以及负载均衡的考虑很重要。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;对于DB切分，实质上就是数据切分。下面从What, Why, How三个方面来讲述。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;What？什么是数据切分？&quot;&gt;What？什么是数据切分？&lt;/h3&gt;&lt;p&gt;具体将有什么样的切分方式呢和路由方式呢？举个简单的例子：我们针对一个Blog应用中的日志来说明，比如日志文章（article）表有如下字段：article_id(int),title(varchar(128)),content(varchar(1024)),user_id(int)&lt;br&gt;面对这样的一个表，我们怎样切分呢？怎样将这样的数据分布到不同的数据库中的表中去呢？其实分析blog的应用，我们不难得出这样的结论：blog的应用中，用户分为两种：浏览者和blog的主人。浏览者浏览某个blog，实际上是在一个特定的用户的blog下进行浏览的，而blog的主人管理自己的blog，也同样是在特定的用户blog下进行操作的（在自己的空间下）。所谓的特定的用户，用数据库的字段表示就是“user_id”。就是这个“user_id”，它就是我们需要的分库的依据和规则的基础。我们可以这样做，将user_id为1～10000的所有的文章信息放入DB1中的article表中，将user_id为10001～20000的所有文章信息放入DB2中的article表中，以此类推，一直到DBn。这样一来，文章数据就很自然的被分到了各个数据库中，达到了数据切分的目的。接下来要解决的问题就是怎样找到具体的数据库呢？其实问题也是简单明显的，既然分库的时候我们用到了区分字段user_id，那么很自然，数据库路由的过程当然还是少不了user_id的。考虑一下我们刚才呈现的blog应用，不管是访问别人的blog还是管理自己的blog，总之我都要知道这个blog的用户是谁吧，也就是我们知道了这个blog的user_id，就利用这个user_id，利用分库时候的规则，反过来定位具体的数据库，比如user_id是234，利用该才的规则，就应该定位到DB1，假如user_id是12343，利用该才的规则，就应该定位到DB2。以此类推，利用分库的规则，反向的路由到具体的DB，这个过程我们称之为“DB路由”。&lt;/p&gt;
&lt;p&gt;当然考虑到数据切分的DB设计必然是非常规，不正统的DB设计。那么什么样的DB设计是正统的DB设计呢？&lt;/p&gt;
&lt;p&gt;我们平常规规矩矩用的基本都是。平常我们会自觉的按照范式来设计我们的数据库，负载高点可能考虑使用相关的Replication机制来提高读写的吞吐和性能，这可能已经可以满足很多需求，但这套机制自身的缺陷还是比较显而易见的。上面提到的“自觉的按照范式设计”。考虑到数据切分的DB设计，将违背这个通常的规矩和约束，为了切分，我们不得不在数据库的表中出现冗余字段，用作区分字段或者叫做分库的标记字段，比如上面的article的例子中的user_id这样的字段（当然，刚才的例子并没有很好的体现出user_id的冗余性，因为user_id这个字段即使就是不分库，也是要出现的，算是我们捡了便宜吧）。当然冗余字段的出现并不只是在分库的场景下才出现的，在很多大型应用中，冗余也是必须的，这个涉及到高效DB的设计。&lt;/p&gt;
&lt;h3 id=&quot;Why?为什么要切分数据？&quot;&gt;Why?为什么要切分数据？&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;像Oracle这样成熟稳定的DB可以支撑海量数据的存储和查询，但是价格不是所有人都承受得起。&lt;/li&gt;
&lt;li&gt;负载高点时，Master-Slaver模式中存在瓶颈。现有技术中，在负载高点时使用相关的Replication机制来实现相关的读写的吞吐性能。这种机制存在两个瓶颈：一是有效性依赖于读操作的比例，这里Master往往会成为瓶颈所在，写操作时需要一个顺序队列来执行，过载时Master会承受不住，Slaver的数据同步延迟也会很大，同时还会消耗CPU的计算能力，为write操作在Master上执行以后还是需要在每台slave机器上都跑一次。而Sharding可以轻松的将计算，存储，I/O并行分发到多台机器上，这样可以充分利用多台机器各种处理能力，同时可以避免单点失败，提供系统的可用性，进行很好的错误隔离。&lt;/li&gt;
&lt;li&gt;用免费的MySQL和廉价的Server甚至是PC做集群，达到小型机+大型商业DB的效果，减少大量的资金投入，降低运营成本，何乐而不为呢？&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;How？如何切分数据？&quot;&gt;How？如何切分数据？&lt;/h3&gt;&lt;p&gt;先对数据切分的方法和形式进行比较详细的阐述和说明。&lt;/p&gt;
&lt;p&gt;数据切分可以是物理上的，对数据通过一系列的切分规则将数据分布到不同的DB服务器上，通过路由规则路由访问特定的数据库，这样一来每次访问面对的就不是单台服务器了，而是N台服务器，这样就可以降低单台机器的负载压力。&lt;br&gt;数据切分也可以是数据库内的，对数据通过一系列的切分规则，将数据分布到一个数据库的不同表中，比如将article分为article_001,article_002等子表，若干个子表水平拼合有组成了逻辑上一个完整的article表，这样做的目的其实也是很简单的。举个例子说明，比如article表中现在有5000w条数据，此时我们需要在这个表中增加（insert）一条新的数据，insert完毕后，数据库会针对这张表重新建立索引，5000w行数据建立索引的系统开销还是不容忽视的。但是反过来，假如我们将这个表分成100个table呢，从article_001一直到article_100，5000w行数据平均下来，每个子表里边就只有50万行数据，这时候我们向一张只有50w行数据的table中insert数据后建立索引的时间就会呈数量级的下降，极大了提高了DB的运行时效率，提高了DB的并发量。当然分表的好处还不知这些，还有诸如写操作的锁操作等，都会带来很多显然的好处。&lt;br&gt;综上，分库降低了单点机器的负载；分表，提高了数据操作的效率，尤其是Write操作的效率。&lt;/p&gt;
&lt;p&gt;上文中提到，要想做到数据的水平切分，在每一个表中都要有相冗余字符作为切分依据和标记字段，通常的应用中我们选用user_id作为区分字段，基于此就有如下三种分库的方式和规则：（当然还可以有其他的方式）&lt;br&gt;按号段分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;user_id为区分，1～1000的对应DB1，1001～2000的对应DB2，以此类推；&lt;br&gt;优点：可部分迁移&lt;br&gt;缺点：数据分布不均&lt;/li&gt;
&lt;li&gt;hash取模分：&lt;br&gt;对user_id进行hash（或者如果user_id是数值型的话直接使用user_id的值也可），然后用一个特定的数字，比如应用中需要将一个数据库切分成4个数据库的话，我们就用4这个数字对user_id的hash值进行取模运算，也就是user_id%4,这样的话每次运算就有四种可能：结果为1的时候对应DB1；结果为2的时候对应DB2；结果为3的时候对应DB3；结果为0的时候对应DB4，这样一来就非常均匀的将数据分配到4个DB中。&lt;br&gt;优点：数据分布均匀&lt;br&gt;缺点：数据迁移的时候麻烦，不能按照机器性能分摊数据&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在认证库中保存数据库配置&lt;br&gt;就是建立一个DB，这个DB单独保存user_id到DB的映射关系，每次访问数据库的时候都要先查询一次这个数据库，以得到具体的DB信息，然后才能进行我们需要的查询操作。&lt;br&gt;优点：灵活性强，一对一关系&lt;br&gt;缺点：每次查询之前都要多一次查询，性能大打折扣&lt;br&gt;以上就是通常的开发中我们选择的三种方式，有些复杂的项目中可能会混合使用这三种方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接下来对分布式数据库解决海量数据的存访问题做进一步介绍&lt;br&gt;分布式数据方案提供功能如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;提供分库规则和路由规则（RouteRule简称RR），将上面的说明中提到的三中切分规则直接内嵌入本系统，具体的嵌入方式在接下来的内容中进行详细的说明和论述；&lt;/li&gt;
&lt;li&gt;引入集群（Group）的概念，解决容错性的问题，保证数据的高可用性；&lt;/li&gt;
&lt;li&gt;引入负载均衡策略（LoadBalancePolicy简称LB）；&lt;/li&gt;
&lt;li&gt;引入集群节点可用性探测机制，对单点机器的可用性进行定时的侦测，以保证LB策略的正确实施，以确保系统的高度稳定性；&lt;/li&gt;
&lt;li&gt;引入读/写分离，提高数据的查询速度；&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;分布式DB水平切分中用到的主要关键技术：分库，分表，M-S,集群，负载均衡&lt;/li&gt;
&lt;li&gt;需求分析：一个大型互联网应用每天几十亿的PV对DB造成了相当高的负载，对系统的稳定性的扩展性带来极大挑战。&lt;/li&gt;
&lt;li&gt;现有解决方式：&lt;/li&gt;
&lt;/ol&gt;
&lt;u
    
    </summary>
    
      <category term="性能&优化" scheme="http://yangfan-onion.github.io/categories/%E6%80%A7%E8%83%BD-%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="MySQL" scheme="http://yangfan-onion.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>The most used built-in functions in php</title>
    <link href="http://yangfan-onion.github.io/The-most-used-built-in-functions-in-php/"/>
    <id>http://yangfan-onion.github.io/The-most-used-built-in-functions-in-php/</id>
    <published>2015-10-19T06:26:08.000Z</published>
    <updated>2016-04-08T13:01:08.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;PHP常用&quot;&gt;PHP常用&lt;/h1&gt;&lt;h2 id=&quot;Variables&quot;&gt;Variables&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;$_COOKIE - $HTTP_COOKIE_VARS [deprecated] — HTTP Cookies&lt;/li&gt;
&lt;li&gt;$_ENV - $HTTP_ENV_VARS [deprecated] — Environment variables&lt;/li&gt;
&lt;li&gt;$_SERVER - $HTTP_SERVER_VARS [removed] — Server and execution environment information&lt;/li&gt;
&lt;li&gt;$GLOBALS —  References all variables available in global scope&lt;/li&gt;
&lt;li&gt;$_SESSION - $HTTP_SESSION_VARS [deprecated] — Session variables&lt;/li&gt;
&lt;li&gt;$_FILES - $HTTP_POST_FILES [deprecated] — HTTP File Upload variables&lt;/li&gt;
&lt;li&gt;$argc — The number of arguments passed to script&lt;/li&gt;
&lt;li&gt;$argv — Array of arguments passed to script&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Function&quot;&gt;Function&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;explode() — Split a string by string&lt;/li&gt;
&lt;li&gt;implode() - Join array elements with a string&lt;/li&gt;
&lt;li&gt;trim() - Strip whitespace (or other characters) from the beginning and end of a string&lt;/li&gt;
&lt;li&gt;basename() - Returns trailing name component of path&lt;/li&gt;
&lt;li&gt;dirname() - Returns a parent directory’s path&lt;/li&gt;
&lt;li&gt;set_time_limit() -  Limits the maximum execution time&lt;/li&gt;
&lt;li&gt;time() - Return current Unix timestamp&lt;/li&gt;
&lt;li&gt;is_bool() - Finds out whether a variable is a boolean&lt;/li&gt;
&lt;li&gt;is_int() - Find whether the type of a variable is integer&lt;/li&gt;
&lt;li&gt;is_float() - Finds whether the type of a variable is float&lt;/li&gt;
&lt;li&gt;strtotime() - Parse about any English textual datetime description into a Unix timestamp&lt;/li&gt;
&lt;li&gt;fopen() - Opens file or URL &lt;/li&gt;
&lt;li&gt;fgets() - Gets line from file pointer&lt;/li&gt;
&lt;li&gt;feof() - Tests for end-of-file on a file pointer&lt;/li&gt;
&lt;li&gt;strlen() - Get string length&lt;/li&gt;
&lt;li&gt;str_replace() - Replace all occurrences of the search string with the replacement string&lt;/li&gt;
&lt;li&gt;isset() - Determine if a variable is set and is not NULL&lt;/li&gt;
&lt;li&gt;strpo() - Find the position of the first occurrence of a substring in a string&lt;/li&gt;
&lt;li&gt;DIRECTORY_SEPARATOR - windows(\ or /), unix(/)&lt;/li&gt;
&lt;li&gt;PATH_SEPARATOR - windows(;), unix(:)&lt;/li&gt;
&lt;li&gt;count() - Count all elements in an array, &lt;code&gt;or something in an object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;substr() - Return part of string, &lt;code&gt;string substr ( string $string , int $start [, int $length ] )&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;memory_get_usage() -  Returns the amount of memory allocated to PHP&lt;/li&gt;
&lt;li&gt;ceil() - Round fractions up, &lt;code&gt;ceil(3.1) =&amp;gt; 4&lt;/code&gt; &lt;code&gt;ceil(-3.14) =&amp;gt; -3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;floor() - Round fractions down&lt;/li&gt;
&lt;li&gt;round() - Rounds a float &lt;code&gt;round(3.4) =&amp;gt; 3&lt;/code&gt; &lt;code&gt;round(3.5) =&amp;gt; 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;preg_match() - Perform a regular expression match &lt;code&gt;int preg_match ( string $pattern , string $subject [, array &amp;amp;$matches [, int $flags = 0 [, int $offset = 0 ]]] )&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;preg_replace()&lt;/li&gt;
&lt;li&gt;php_strip_whitespace() - Return source with stripped comments and whitespace&lt;/li&gt;
&lt;li&gt;array_chunk() - Split an array into chunks&lt;/li&gt;
&lt;li&gt;array_column() - Return the values from a single column in the input array&lt;/li&gt;
&lt;li&gt;array_combine() -  Creates an array by using one array for keys and another for its values&lt;/li&gt;
&lt;li&gt;array_count_values() — Counts all the values of an array&lt;/li&gt;
&lt;li&gt;array_keys() — Return all the keys or a subset of the keys of an array&lt;/li&gt;
&lt;li&gt;array_map() — Applies the callback to the elements of the given arrays&lt;/li&gt;
&lt;li&gt;array_shift() — Shift an element off the beginning of array&lt;/li&gt;
&lt;li&gt;array_pop() — Pop the element off the end of array&lt;/li&gt;
&lt;li&gt;array_intersect() — Computes the intersection of arrays&lt;/li&gt;
&lt;li&gt;array_key_exists() — Checks if the given key or index exists in the array&lt;/li&gt;
&lt;li&gt;array_unique() — Removes duplicate values from an array&lt;/li&gt;
&lt;li&gt;array_unshift() — Prepend one or more elements to the beginning of an array&lt;/li&gt;
&lt;li&gt;array_values() — Return all the values of an array&lt;/li&gt;
&lt;li&gt;zlib:// – bzip2:// – zip:// — Compression Streams&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;$_SERVER&quot;&gt;$_SERVER&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Just a PHP file to put on your local server (as I don&amp;#39;t have enough memory) &amp;#10;&amp;#10;&amp;#60;?php &amp;#10;&amp;#9;$indicesServer = array(&amp;#39;PHP_SELF&amp;#39;, &amp;#10;&amp;#9;&amp;#39;argv&amp;#39;, &amp;#10;&amp;#9;&amp;#39;argc&amp;#39;, &amp;#10;&amp;#9;&amp;#39;GATEWAY_INTERFACE&amp;#39;, &amp;#10;&amp;#9;&amp;#39;SERVER_ADDR&amp;#39;, &amp;#10;&amp;#9;&amp;#39;SERVER_NAME&amp;#39;, &amp;#10;&amp;#9;&amp;#39;SERVER_SOFTWARE&amp;#39;, &amp;#10;&amp;#9;&amp;#39;SERVER_PROTOCOL&amp;#39;, &amp;#10;&amp;#9;&amp;#39;REQUEST_METHOD&amp;#39;, &amp;#10;&amp;#9;&amp;#39;REQUEST_TIME&amp;#39;, &amp;#10;&amp;#9;&amp;#39;REQUEST_TIME_FLOAT&amp;#39;, &amp;#10;&amp;#9;&amp;#39;QUERY_STRING&amp;#39;, &amp;#10;&amp;#9;&amp;#39;DOCUMENT_ROOT&amp;#39;, &amp;#10;&amp;#9;&amp;#39;HTTP_ACCEPT&amp;#39;, &amp;#10;&amp;#9;&amp;#39;HTTP_ACCEPT_CHARSET&amp;#39;, &amp;#10;&amp;#9;&amp;#39;HTTP_ACCEPT_ENCODING&amp;#39;, &amp;#10;&amp;#9;&amp;#39;HTTP_ACCEPT_LANGUAGE&amp;#39;, &amp;#10;&amp;#9;&amp;#39;HTTP_CONNECTION&amp;#39;, &amp;#10;&amp;#9;&amp;#39;HTTP_HOST&amp;#39;, &amp;#10;&amp;#9;&amp;#39;HTTP_REFERER&amp;#39;, &amp;#10;&amp;#9;&amp;#39;HTTP_USER_AGENT&amp;#39;, &amp;#10;&amp;#9;&amp;#39;HTTPS&amp;#39;, &amp;#10;&amp;#9;&amp;#39;REMOTE_ADDR&amp;#39;, &amp;#10;&amp;#9;&amp;#39;REMOTE_HOST&amp;#39;, &amp;#10;&amp;#9;&amp;#39;REMOTE_PORT&amp;#39;, &amp;#10;&amp;#9;&amp;#39;REMOTE_USER&amp;#39;, &amp;#10;&amp;#9;&amp;#39;REDIRECT_REMOTE_USER&amp;#39;, &amp;#10;&amp;#9;&amp;#39;SCRIPT_FILENAME&amp;#39;, &amp;#10;&amp;#9;&amp;#39;SERVER_ADMIN&amp;#39;, &amp;#10;&amp;#9;&amp;#39;SERVER_PORT&amp;#39;, &amp;#10;&amp;#9;&amp;#39;SERVER_SIGNATURE&amp;#39;, &amp;#10;&amp;#9;&amp;#39;PATH_TRANSLATED&amp;#39;, &amp;#10;&amp;#9;&amp;#39;SCRIPT_NAME&amp;#39;, &amp;#10;&amp;#9;&amp;#39;REQUEST_URI&amp;#39;, &amp;#10;&amp;#9;&amp;#39;PHP_AUTH_DIGEST&amp;#39;, &amp;#10;&amp;#9;&amp;#39;PHP_AUTH_USER&amp;#39;, &amp;#10;&amp;#9;&amp;#39;PHP_AUTH_PW&amp;#39;, &amp;#10;&amp;#9;&amp;#39;AUTH_TYPE&amp;#39;, &amp;#10;&amp;#9;&amp;#39;PATH_INFO&amp;#39;, &amp;#10;&amp;#9;&amp;#39;ORIG_PATH_INFO&amp;#39;) ; &amp;#10;&amp;#10;&amp;#9;echo &amp;#39;&amp;#60;table cellpadding=&amp;#34;10&amp;#34;&amp;#62;&amp;#39; ; &amp;#10;&amp;#9;foreach ($indicesServer as $arg) &amp;#123; &amp;#10;&amp;#9;    if (isset($_SERVER[$arg])) &amp;#123; &amp;#10;&amp;#9;        echo &amp;#39;&amp;#60;tr&amp;#62;&amp;#60;td&amp;#62;&amp;#39;.$arg.&amp;#39;&amp;#60;/td&amp;#62;&amp;#60;td&amp;#62;&amp;#39; . $_SERVER[$arg] . &amp;#39;&amp;#60;/td&amp;#62;&amp;#60;/tr&amp;#62;&amp;#39; ; &amp;#10;&amp;#9;    &amp;#125; &amp;#10;&amp;#9;    else &amp;#123; &amp;#10;&amp;#9;        echo &amp;#39;&amp;#60;tr&amp;#62;&amp;#60;td&amp;#62;&amp;#39;.$arg.&amp;#39;&amp;#60;/td&amp;#62;&amp;#60;td&amp;#62;-&amp;#60;/td&amp;#62;&amp;#60;/tr&amp;#62;&amp;#39; ; &amp;#10;&amp;#9;    &amp;#125; &amp;#10;&amp;#9;&amp;#125; &amp;#10;&amp;#9;echo &amp;#39;&amp;#60;/table&amp;#62;&amp;#39; ; &amp;#10;&amp;#10;&amp;#9;/* &amp;#10;&amp;#10;&amp;#9;That will give you the result of each variable like (if the file is server_indices.php at the root and Apache Web directory is in E:\web) : &amp;#10;&amp;#10;&amp;#9;PHP_SELF    /server_indices.php &amp;#10;&amp;#9;argv    - &amp;#10;&amp;#9;argc    - &amp;#10;&amp;#9;GATEWAY_INTERFACE    CGI/1.1 &amp;#10;&amp;#9;SERVER_ADDR    127.0.0.1 &amp;#10;&amp;#9;SERVER_NAME    localhost &amp;#10;&amp;#9;SERVER_SOFTWARE    Apache/2.2.22 (Win64) PHP/5.3.13 &amp;#10;&amp;#9;SERVER_PROTOCOL    HTTP/1.1 &amp;#10;&amp;#9;REQUEST_METHOD    GET &amp;#10;&amp;#9;REQUEST_TIME    1361542579 &amp;#10;&amp;#9;REQUEST_TIME_FLOAT    - &amp;#10;&amp;#9;QUERY_STRING    &amp;#10;&amp;#9;DOCUMENT_ROOT    E:/web/ &amp;#10;&amp;#9;HTTP_ACCEPT    text/html,application/xhtml+xml,application/xml;q=0.9,*;q=0.8 &amp;#10;&amp;#9;HTTP_ACCEPT_CHARSET    ISO-8859-1,utf-8;q=0.7,*;q=0.3 &amp;#10;&amp;#9;HTTP_ACCEPT_ENCODING    gzip,deflate,sdch &amp;#10;&amp;#9;HTTP_ACCEPT_LANGUAGE    fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4 &amp;#10;&amp;#9;HTTP_CONNECTION    keep-alive &amp;#10;&amp;#9;HTTP_HOST    localhost &amp;#10;&amp;#9;HTTP_REFERER    http://localhost/ &amp;#10;&amp;#9;HTTP_USER_AGENT    Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17 &amp;#10;&amp;#9;HTTPS    - &amp;#10;&amp;#9;REMOTE_ADDR    127.0.0.1 &amp;#10;&amp;#9;REMOTE_HOST    - &amp;#10;&amp;#9;REMOTE_PORT    65037 &amp;#10;&amp;#9;REMOTE_USER    - &amp;#10;&amp;#9;REDIRECT_REMOTE_USER    - &amp;#10;&amp;#9;SCRIPT_FILENAME    E:/web/server_indices.php &amp;#10;&amp;#9;SERVER_ADMIN    myemail@personal.us &amp;#10;&amp;#9;SERVER_PORT    80 &amp;#10;&amp;#9;SERVER_SIGNATURE    &amp;#10;&amp;#9;PATH_TRANSLATED    - &amp;#10;&amp;#9;SCRIPT_NAME    /server_indices.php &amp;#10;&amp;#9;REQUEST_URI    /server_indices.php &amp;#10;&amp;#9;PHP_AUTH_DIGEST    - &amp;#10;&amp;#9;PHP_AUTH_USER    - &amp;#10;&amp;#9;PHP_AUTH_PW    - &amp;#10;&amp;#9;AUTH_TYPE    - &amp;#10;&amp;#9;PATH_INFO    - &amp;#10;&amp;#9;ORIG_PATH_INFO    - &amp;#10;&amp;#10;&amp;#9;*/ &amp;#10;?&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;fopen()&quot;&gt;fopen()&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fopen ( string $filename , string $mode [, bool $use_include_path = false [, resource $context ]] )&amp;#10;&amp;#10;&amp;#10;&amp;#60;?php&amp;#10;&amp;#9;$handle = fopen(&amp;#34;/home/rasmus/file.txt&amp;#34;, &amp;#34;r&amp;#34;);&amp;#10;&amp;#9;$handle = fopen(&amp;#34;/home/rasmus/file.gif&amp;#34;, &amp;#34;wb&amp;#34;);&amp;#10;&amp;#9;$handle = fopen(&amp;#34;http://www.example.com/&amp;#34;, &amp;#34;r&amp;#34;);&amp;#10;&amp;#9;$handle = fopen(&amp;#34;ftp://user:password@example.com/somefile.txt&amp;#34;, &amp;#34;w&amp;#34;);&amp;#10;?&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;    
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;mode&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;‘r’&lt;/td&gt;
&lt;td&gt;Open for reading only; place the file pointer at the beginning of the file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘r+’&lt;/td&gt;
&lt;td&gt;Open for reading and writing; place the file pointer at the beginning of the file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘w’&lt;/td&gt;
&lt;td&gt;Open for writing only; place the file pointer at the beginning of the file and truncate the file to zero length. If the file does not exist, attempt to create it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘w+’&lt;/td&gt;
&lt;td&gt;Open for reading and writing; place the file pointer at the beginning of the file and truncate the file to zero length. If the file does not exist, attempt to create it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘a’&lt;/td&gt;
&lt;td&gt;Open for writing only; place the file pointer at the end of the file. If the file does not exist, attempt to create it. In this mode, fseek() only affects the reading position, writes are always appended.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘a+’&lt;/td&gt;
&lt;td&gt;Open for reading and writing; place the file pointer at the end of the file. If the file does not exist, attempt to create it. In this mode, fseek() only affects the reading position, writes are always appended.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘x’&lt;/td&gt;
&lt;td&gt;Create and open for writing only; place the file pointer at the beginning of the file. If the file already exists, the fopen() call will fail by returning FALSE and generating an error of level E_WARNING. If the file does not exist, attempt to create it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘x+’&lt;/td&gt;
&lt;td&gt;Create and open for reading and writing; otherwise it has the same behavior as ‘x’.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘c’&lt;/td&gt;
&lt;td&gt;Open the file for writing only. If the file does not exist, it is created. If it exists, it is neither truncated (as opposed to ‘w’), nor the call to this function fails (as is the case with ‘x’). The file pointer is positioned on the beginning of the file. This may be useful if it’s desired to get an advisory lock (see flock()) before attempting to modify the file, as using ‘w’ could truncate the file before the lock was obtained (if truncation is desired, ftruncate() can be used after the lock is requested).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;‘c+’&lt;/td&gt;
&lt;td&gt;Open the file for reading and writing; otherwise it has the same behavior as ‘c’.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;###p hp_strip_whitespace()&lt;/p&gt;
&lt;h6 id=&quot;usage:&quot;&gt;usage:&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;?php&amp;#10;&amp;#9;// PHP comment here&amp;#10;&amp;#10;&amp;#9;/*&amp;#10;&amp;#9; * Another PHP comment&amp;#10;&amp;#9; */&amp;#10;&amp;#10;&amp;#9;echo        php_strip_whitespace(__FILE__);&amp;#10;&amp;#9;// Newlines are considered whitespace, and are removed too:&amp;#10;&amp;#9;do_nothing();&amp;#10;?&amp;#62;&amp;#10;###### The output:&amp;#10;&amp;#60;?php&amp;#10;&amp;#9;&amp;#9;echo php_strip_whitespace(__FILE__); do_nothing();&amp;#10;&amp;#9;?&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;     
&lt;p&gt;###array_map()&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;?php&amp;#10;&amp;#9;function cube($n)&amp;#10;&amp;#9;&amp;#123;&amp;#10;&amp;#9;    return($n * $n * $n);&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;$a = array(1, 2, 3, 4, 5);&amp;#10;&amp;#9;$b = array_map(&amp;#34;cube&amp;#34;, $a);&amp;#10;&amp;#9;print_r($b);&amp;#10;?&amp;#62;&amp;#10;&amp;#10;//output:&amp;#10;Array&amp;#10;(&amp;#10;&amp;#9;[0] =&amp;#62; 1&amp;#10;    [1] =&amp;#62; 8&amp;#10;    [2] =&amp;#62; 27&amp;#10;&amp;#9;[3] =&amp;#62; 64&amp;#10;    [4] =&amp;#62; 125&amp;#10;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;zip&quot;&gt;zip&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example on how to read an entry from a ZIP archive (file &amp;#34;bar.txt&amp;#34; inside &amp;#34;./foo.zip&amp;#34;): &amp;#10;&amp;#60;?php &amp;#10;&amp;#10;$fp = fopen(&amp;#39;zip://./foo.zip#bar.txt&amp;#39;, &amp;#39;r&amp;#39;); &amp;#10;if( $fp )&amp;#123; &amp;#10;&amp;#9;while( !feof($fp) )&amp;#123; &amp;#10;    &amp;#9;echo fread($fp, 8192); &amp;#10;    &amp;#125; &amp;#10;    fclose($fp); &amp;#10;&amp;#125; &amp;#10;&amp;#10;?&amp;#62; &amp;#10;&amp;#10;Also, apparently, the &amp;#34;zip:&amp;#34; wrapper does not allow writing as of PHP/5.3.6. &amp;#9;You can read http://php.net/ziparchive-getstream for further reference since the underlying code is probably the same.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;A_few_“magical”_PHP_constants&quot;&gt;A few “magical” PHP constants&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;LINE&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The current line number of the file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;FILE&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The full path and filename of the file with symlinks resolved. If used inside an include, the name of the included file is returned.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;DIR&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The directory of the file. If used inside an include, the directory of the included file is returned. This is equivalent to dirname(&lt;strong&gt;FILE&lt;/strong&gt;). This directory name does not have a trailing slash unless it is the root directory.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;FUNCTION&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The function name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CLASS&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The class name. The class name includes the namespace it was declared in (e.g. Foo\Bar). Note that as of PHP 5.4 &lt;strong&gt;CLASS&lt;/strong&gt; works also in traits. When used in a trait method, &lt;strong&gt;CLASS&lt;/strong&gt; is the name of the class the trait is used in.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;TRAIT&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The trait name. The trait name includes the namespace it was declared in (e.g. Foo\Bar).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;METHOD&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The class method name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;NAMESPACE&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The name of the current namespace.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PHP常用&quot;&gt;PHP常用&lt;/h1&gt;&lt;h2 id=&quot;Variables&quot;&gt;Variables&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;$_COOKIE - $HTTP_COOKIE_VARS [deprecated] — HTTP Cookies&lt;/li&gt;
&lt;li&gt;$_ENV -
    
    </summary>
    
      <category term="Code" scheme="http://yangfan-onion.github.io/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>wordpress后期优化</title>
    <link href="http://yangfan-onion.github.io/Wordpress%E5%90%8E%E6%9C%9F%E4%BC%98%E5%8C%96/"/>
    <id>http://yangfan-onion.github.io/Wordpress后期优化/</id>
    <published>2015-10-09T03:19:25.000Z</published>
    <updated>2016-04-08T13:11:50.000Z</updated>
    
    <content type="html">&lt;p&gt;前段时间用到的一个google的网站优化检测工具&lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PageSpeed Insights&lt;/a&gt;主要是用来优化网站用&lt;/p&gt;
&lt;p&gt;我刚搭建好的&lt;a href=&quot;http://www.bofeng.com.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;公司官网&lt;/a&gt;使用的是wordpress定制开发，主题开发好了之后，最后再来做性能优化，总结了一下几点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;wordpress生成缓存使用的是&lt;a href=&quot;https://wordpress.org/plugins/wp-super-cache/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WP Super Cache&lt;/a&gt;可以将php页面缓存起来，用户请求页面后，不会每次都去执行php脚本&lt;/li&gt;
&lt;li&gt;静态资源去除无意义cookie，子域名或者另行购置域名设置无cookie，当浏览器在请求中同时请求一张静态的图片和发送cookie时，服务器对于这些cookie不会做任何地使用，因此他们只是因为某些负面因素而创建的网络传输。所有你应该确定对于静态内容的请求是无cookie的请求，创建一个子域名并用他来存放所有静态内容。如果你的域名是www.example.org，你可以在static.example.org上存在静态内容。但是，如果你不是在www.example.org上而是在顶级域名example.org设置了cookie，那么所有对于static.example.org的请求都包含cookie。在这种情况下，你可以再重新购买一个新的域名来存在静态内容，并且要保持这个域名是无cookie的。Yahoo!使用的是ymig.com，YouTube使用的是ytimg.com，Amazon使用的是images-anazon.com等等。使用无cookie域名存在静态内容的另外一个好处就是一些代理（服务器）可能会拒绝对cookie的内容请求进行缓存。一个相关的建议就是，如果你想确定应该使用example.org还是www.example.org作为你的一主页，你要考虑到cookie带来的影响。忽略掉www会使你除了把cookie设置到*.example.org外没有其它选择，因此出于性能方面的考虑最好是使用带有www的子域名并且在它上面设置cookie。&lt;/li&gt;
&lt;li&gt;静态资源加过期时间，nginx自行配置&lt;/li&gt;
&lt;li&gt;css合并和压缩,使用插件&lt;a href=&quot;https://wordpress.org/plugins/autoptimize/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Autoptimize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;html压缩和去comment，使用插件&lt;a href=&quot;https://wordpress.org/plugins/autoptimize/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Autoptimize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;js放到标签前，这个是靠&lt;code&gt;wp_enqueue_script( $handle, $src, $deps, $ver, $in_footer );&lt;/code&gt;来规范&lt;/li&gt;
&lt;li&gt;SEO: &lt;a href=&quot;https://wordpress.org/plugins/all-in-one-seo-pack/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;All in One SEO&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;*&lt;/em&gt;更多参考&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yahoo网页优化&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间用到的一个google的网站优化检测工具&lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PageSpeed Insigh
    
    </summary>
    
      <category term="性能&优化" scheme="http://yangfan-onion.github.io/categories/%E6%80%A7%E8%83%BD-%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="wordpress" scheme="http://yangfan-onion.github.io/tags/wordpress/"/>
    
      <category term="优化" scheme="http://yangfan-onion.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
